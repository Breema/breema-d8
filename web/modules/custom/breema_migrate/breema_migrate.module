<?php

/**
 * @file
 * Contains breema_migrate.module.
 */

use CommerceGuys\Addressing\Country\CountryRepositoryInterface;

/**
 * Migration callback function to map country names to country codes.
 */
function breema_migrate_map_country_to_code($source_country) {
  static $country_map = array();
  if (empty($country_map)) {
    $country_repository = \Drupal::service('address.country_repository');
    $country_map = $country_repository->getList();
    $country_map = array_map('strtolower', $country_map);
  }

  if (empty($source_country)) {
    return 'US';
  }
  return array_search(strtolower($source_country), $country_map);
}

/**
 * Migration callback function to handle certification level field.
 */
function breema_migrate_certification_level($source) {
  switch ($source) {
    case '---':
      return 'practitioner';

    case 'Prov SB Instructor---':
      return 'prov-self-breema';

    case '-SB Instructor--':
      return 'self-breema';

    case '--Prov Instructor-':
      return 'prov-instructor';

    case '---Instructor':
      return 'instructor';

  }
}

/**
 * Migration callback function to set image filename based on file path.
 */
function breema_migrate_image_path_to_uri($source) {
  // $source will be something like 'bodywork/SA_AL.jpg'.
  $file_parts = explode('/', $source);
  return 'public://image/' . $file_parts[0] . '/2018-01/' . $file_parts[1];
}

/**
 * Migration callback function to set image type based on file path.
 */
function breema_migrate_image_path_to_type($source) {
  $base = dirname($source);
  switch ($base) {
    case 'self-breema':
      return 'Self-Breema';
    case 'social_media':
      return 'Social Media';
    default:
      return ucfirst($base);
  }
}

/**
 * Migration callback function to determine a URL slug for a given name.
 *
 * We get first_last. However, we need to handle ' ' and '-', and convert
 * everything to lowercase.
 *
 * @todo better transliteration behavior to match EE2 legacy URLs.
 */
function breema_migrate_name_slug($name) {
  $clean_name = \Drupal::service('transliteration')->transliterate($name);
  //dvm("original: $name clean: $clean_name");
  return str_replace([' ', '-'], ['_', '_'], strtolower($clean_name));
}
