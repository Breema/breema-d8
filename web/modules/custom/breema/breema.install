<?php

/**
 * @file
 * Update functions for the breema module.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

/**
 * Convert node 2 into a place and set the address and contact info.
 */
function _breema_update_8000() {
  $query = \Drupal::database()
         ->update('node')
         ->fields(['type' => 'place'])
         ->condition('nid', '2', '=')
         ->execute();
  $node = Node::load(2);
  $node->setTitle('The Breema Center');
  $node->set('field_address', [
               'country_code' => 'US',
               'administrative_area' => 'CA',
               'locality' => 'Oakland',
               'postal_code' => '94618',
               'address_line1' => '6076 Claremont Ave.',
             ]);
  $node->set('field_email', 'center@breema.com');
  $node->set('field_telephone', '510-428-0937');
  $node->save();
}

/**
 * Force all user timezones to UTC.
 */
function _breema_update_8001() {
  $query = \Drupal::database()
         ->update('users_field_data')
         ->fields(['timezone' => 'UTC'])
         ->execute();
}

/**
 * Convert node/17 into a directory entry with accurate info for Jon.
 */
function _breema_update_8002() {
  $query = \Drupal::database()
         ->update('node')
         ->fields(['type' => 'directory_entry'])
         ->condition('nid', '17', '=')
         ->execute();
  $node = Node::load(17);
  $node->setTitle('Jon Schreiber');
  $node->set('field_name_first', 'Jon');
  $node->set('field_name_last', 'Schreiber');
  $node->set('field_job_title', 'Director of the Breema Center');
  $node->set('field_breema_center_staff', TRUE);
  $node->set('field_breema_clinic_practitioner', TRUE);
  $node->set('field_certification', [
               'practitioner',
               'inst-self-breema',
               'inst-breema',
             ]);
  $node->set('field_address', [
               'country_code' => 'US',
               'administrative_area' => 'CA',
               'locality' => 'Oakland',
               'postal_code' => '94618',
             ]);
  $node->save();
}

/**
 * Repair non-numeric postal codes (users).
 */
function breema_update_8004() {
  $users = User::loadMultiple();
  foreach ($users as $user) {
    _breema_repair_entity_postal_code($user);
  }
}

/**
 * Repair non-numeric postal codes (directory entries).
 */
function breema_update_8005() {
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties(['type' => 'directory_entry']);
  foreach ($nodes as $node) {
    _breema_repair_entity_postal_code($node);
  }
}

/**
 * Private helper function to repair the postal code for  given entity.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to repair. Must have a 'field_address' field.
 */
function _breema_repair_entity_postal_code(EntityInterface $entity) {
  $address = $entity->get('field_address')->getValue();
  if (!is_numeric($address[0]['postal_code'])) {
    $clean_code = preg_replace('#[A-Z]+-#', '', $address[0]['postal_code']);
    if ($address[0]['postal_code'] !== $clean_code) {
      $address[0]['postal_code'] = $clean_code;
      $entity->set('field_address', $address);
      $entity->save();
    }
  }
}

/**
 * Re-save all places (to compute TZ from geolocations).
 */
function breema_update_8006(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $places = \Drupal::entityQuery('node')
      ->condition('type', 'place')
      ->sort('nid')
      ->execute();
    $sandbox['total'] = count($places);
    $sandbox['current'] = 0;
    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  $nodes_per_batch = 50;
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'place')
    ->range($sandbox['current'], $nodes_per_batch)
    ->execute();
  if (empty($nids)) {
    $sandbox['#finished'] = 1;
    return;
  }
  $places = Node::loadMultiple($nids);
  foreach ($places as $place) {
    $place->save();
    $sandbox['current']++;
  }

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    return t('Completed: @count places saved.', ['@count' => $sandbox['current']]);
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    return t('Processing: @percent done: @count places saved', [
      '@count' => $sandbox['current'],
      '@percent' => (string)round($sandbox['#finished'] * 100) . '%',
    ]);
  }
}

/**
 * Re-save all events (to set TZ from place), and set 'online' for 2020 events.
 */
function breema_update_8007(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $event_ids = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'event')
      ->sort('nid')
      ->execute();
    $sandbox['total'] = count($event_ids);
    $sandbox['current'] = 0;
    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  $nodes_per_batch = 50;
  $nids = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'event')
    ->sort('nid')
    ->range($sandbox['current'], $nodes_per_batch)
    ->execute();
  if (empty($nids)) {
    $sandbox['#finished'] = 1;
    return;
  }
  $events = Node::loadMultiple($nids);
  foreach ($events as $event) {
    $date_time = $event->get('field_date_time')->getValue();
    $start_time = new DrupalDateTime($date_time[0]['value']);
    $year = $start_time->format('Y');
    $month = $start_time->format('m');
    if ($year == 2020 && $month > 3 || $year == 2021) {
      $event->set('field_online', TRUE);
    }
    $event->save();
    $sandbox['current']++;
  }

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    return t('Completed: @count events saved.', ['@count' => $sandbox['current']]);
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    return t('Processing: @percent done: @count events saved', [
      '@count' => $sandbox['current'],
      '@percent' => (string)round($sandbox['#finished'] * 100, 2) . '%',
    ]);
  }
}

/**
 * Set field_event_format from field_online values on all event nodes.
 */
function breema_update_8008(&$sandbox) {
  if (!isset($sandbox['total'])) {
    $event_ids = \Drupal::entityQuery('node')
      ->accessCheck(FALSE)
      ->condition('type', 'event')
      ->sort('nid')
      ->execute();
    $sandbox['total'] = count($event_ids);
    $sandbox['current'] = 0;
    if (empty($sandbox['total'])) {
      $sandbox['#finished'] = 1;
      return;
    }
  }
  $nodes_per_batch = 50;
  $nids = \Drupal::entityQuery('node')
    ->accessCheck(FALSE)
    ->condition('type', 'event')
    ->sort('nid')
    ->range($sandbox['current'], $nodes_per_batch)
    ->execute();
  if (empty($nids)) {
    $sandbox['#finished'] = 1;
    return;
  }
  $events = Node::loadMultiple($nids);
  foreach ($events as $event) {
    $is_online = $event->get('field_online')->value;
    $event->set('field_event_format', $is_online ? 'online' : 'in-person');
    $event->save();
    $sandbox['current']++;
  }

  if ($sandbox['current'] >= $sandbox['total']) {
    $sandbox['#finished'] = 1;
    return t('Completed: @count events saved.', ['@count' => $sandbox['current']]);
  }
  else {
    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    return t('Processing: @percent done: @count events saved', [
      '@count' => $sandbox['current'],
      '@percent' => (string)round($sandbox['#finished'] * 100, 2) . '%',
    ]);
  }
}
