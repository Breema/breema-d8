<?php

/**
 * @file
 * Contains breema.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function breema_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the breema module.
    case 'help.page.breema':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code for www.breema.com') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_registry_alter()
 */
function breema_theme_registry_alter(&$theme_registry) {
  $theme_registry['geolocation_common_map_display']['path'] = drupal_get_path('module', 'breema') . '/templates';
}

/**
 * Implements hook_views_pre_render().
 */
function breema_views_pre_render(Drupal\views\ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'breema_directory')) {
    $view->element['#attached']['library'][] = 'breema/views.breema_directory';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'views_exposed_form'.
 *
 * Sets more sane sizes for the various text field exposed filters.
 */
function breema_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $filter_sizes = [
    'postal_code' => 10,
    'telephone' => 15,
    'email' => 20,
    'city' => 20,
    'job_title' => 20,
  ];
  foreach ($filter_sizes as $key => $size) {
    if (!empty($form[$key])) {
      $form[$key]['#size'] = $size;
    }
  }
}

/**
 * Implements hook_entity_create_access().
 */
function breema_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $user = \Drupal\user\Entity\User::load($account->id());
  if (!$user->hasRole('content_editor')) {
    $entity_type_id = $context['entity_type_id'];
    if ($entity_type_id == 'node' && $entity_bundle == 'directory_entry') {
      // If the directory entry reference is already set, deny creation.
      $field_directory_entry = $user->get('field_directory_entry')->getValue();
      if (!empty($field_directory_entry[0]['target_id'])) {
        return AccessResult::forbidden();
      }
      // Even if the directory entry reference is empty, deny creation if this
      // user already owns a directory entry node.
      $query = \Drupal::entityQuery('node')
             ->condition('type', 'directory_entry')
             ->condition('uid', $account->id());
      $nids = $query->execute();
      if (!empty($nids)) {
        return AccessResult::forbidden();
      }        
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_form_display_alter().
 *
 * Allow admin users with 'administer nodes' permission to reference existing
 * nodes on field_directory_entry when editing users.
 */
function breema_entity_form_display_alter(\Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display, array $context) {
  $current_user = \Drupal::currentUser();
  if ($current_user->hasPermission('administer nodes') && $context['entity_type'] == 'user') {
    $directory_entry = $form_display->getComponent('field_directory_entry');
    $directory_entry['settings']['allow_existing'] = TRUE;
    $form_display->setComponent('field_directory_entry', $directory_entry);
  }
}
