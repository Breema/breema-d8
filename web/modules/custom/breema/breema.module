<?php

/**
 * @file
 * Contains breema.module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Asset\CssOptimizer;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\Language;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\block\Entity\Block;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\file\Entity\File;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\views\ResultRow;
use Drupal\views\Plugin\views\cache\CachePluginBase;

use Drupal\flag\Entity\Flagging;
use Drupal\group\Entity\Group;
use Drupal\redirect\Entity\Redirect;

use Drupal\breema\BreemaEventMgr;
use Drupal\breema\PublishScheduler;

/**
 * E-mail address to notify about new session resumes.
 */
const BREEMA_SESSION_RESUME_EMAIL = 'session-resumes@breema.com';

/**
 * E-mail address to notify about events with transfer credit defined.
 */
const BREEMA_EVENT_TRANSFER_CREDIT_EMAIL = 'instructor-liaison@breema.com';

/**
 * E-mail address to notify when new users apply for accounts.
 */
const BREEMA_NEW_USER_EMAIL = 'practitioner-liaison@breema.com';

/**
 * The Facebook App ID for www.breema.com.
 */
const BREEMA_FB_APP_ID = '395768768009749';

/**
 * Implements hook_help().
 */
function breema_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the breema module.
    case 'help.page.breema':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code for www.breema.com') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_image_style().
 *
 * Hack to set appropriate thumbnail dimensions on video thumbnails.
 *
 * @todo Remove this when thumbnails are recorded with the right dimensions.
 * @see https://www.drupal.org/project/drupal/issues/3088168
 */
function breema_preprocess_image_style(&$variables) {
  if (strpos($variables['uri'], 'public://video_thumbnails') === 0) {
    // Thankfully, all our image styles are named "WxH_name".
    $matches = [];
    if (preg_match('/(\d+)x(\d+)_.*/', $variables['style_name'], $matches)) {
      $variables['image']['#width'] = $variables['width'] = $matches[1];
      $variables['image']['#height'] = $variables['height'] = $matches[2];
    }
  }
}

/**
 * Implements hook_preprocess_region().
 */
function breema_preprocess_region(&$variables) {
  // We need to inject a 'clearfix' class into the secondary_menu region.
  // This allows us to float the login (user) menu and search form and not have
  // those elements escape the region (and its plum background).
  if ($variables['region'] === 'secondary_menu') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_forward().
 */
function breema_preprocess_forward(&$variables) {
  if (empty($variables['message']['#markup']) && empty($variables['message']['#plain_text'])) {
    unset($variables['message']);
  }

  // Add the site footer blocks as a template variable.
  $variables['site_footer_blocks'] = [];
  $block_ids = [
    'socialmedialinks',
    'breema_footer_about',
    'breema_footer_text',
    'breema_footer_email',
  ];
  $block_viewer = \Drupal::entityTypeManager()->getViewBuilder('block');
  $weight = 0;
  foreach ($block_ids as $block_id) {
    $block = Block::load('breema2_' . $block_id);
    // We want a 'region' wrapper div on each on to match the markup for the web.
    $variables['site_footer_blocks'][$block_id] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['region'],
      ],
      'block' => $block_viewer->view($block),
    ];
    // Ignore the block weights and force this into the right order.
    $variables['site_footer_blocks'][$block_id]['#weight'] = $weight++;
  }
}

/**
 * Implements hook_preprocess_html().
 */
function breema_preprocess_html(&$variables) {
  // Set <title> for the front page to just the site name.
  if ($variables['root_path'] === FALSE) {
    $variables['head_title'] = \Drupal::config('system.site')->get('name');
  }

  // Work-around the bugs from https://www.drupal.org/node/953034
  // For now, hard-code that anonymous users on /directory* should not see the
  // sidebar.
  if (empty($variables['logged_in'])) {
    switch ($variables['root_path']) {
      case 'directory':
      case 'search':
        unset($variables['page']['sidebar_first']);
        break;
    }
  }

  // Inject social-media-related meta tags for better sharing behavior.
  $path_matcher = \Drupal::service('path.matcher');
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');

  $site_name = \Drupal::config('system.site')->get('name');

  if ($path_matcher->isFrontPage()) {
    $meta_tags = [
      ['property' => 'og:title', 'name' => 'title', 'content' => $site_name],
      ['property' => 'og:url', 'content' => Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString()],
      ['property' => 'og:type', 'content' => 'website'],
    ];
  }
  elseif (!empty($node) && $node instanceof NodeInterface) {
    $clean_title = strip_tags($node->label());
    // Meta tags shared across all node types.
    $meta_tags = [
      ['property' => 'og:title', 'name' => 'title', 'content' => $clean_title],
      ['property' => 'og:url', 'content' => $node->toUrl('canonical', ['absolute' => TRUE])->toString()],
      ['property' => 'og:updated_time', 'content' => $node->get('changed')->value],
      ['property' => 'article:publisher', 'content' => 'https://www.facebook.com/breemacenter'],
      ['name' => 'twitter:title', 'content' => $clean_title],
    ];

    // Any other bundle-specific meta tags that make sense.
    switch ($node->bundle()) {
      case 'product':
        $og_type = 'product';
        $product_info = $node->get('field_product_info')->referencedEntities();
        if (!empty($product_info)) {
          foreach ($product_info as $info) {
            if ($info->getParagraphType()->id() === 'product_info_book') {
              $og_type = 'book';
              // @todo: If we had ISBNs, we could include that here.
              // @todo: Add book:author
              // @todo: Add book:release_date
              break;
            }
          }
        }
        $meta_tags[] = ['property' => 'og:type', 'content' => $og_type];
        break;

      case 'directory_entry':
        $meta_tags[] = [
          'property' => 'profile:first_name',
          'content' => $node->get('field_name_first')->value,
        ];
        $meta_tags[] = [
          'property' => 'profile:last_name',
          'content' => $node->get('field_name_last')->value,
        ];
        break;

      case 'event':
        // @todo: wish there was a better type for events.
        // For now, we treat them basically like articles, and put the
        // instructors in as the 'article:author' properties.
        $author_field = 'field_instructors';
        // no break, share the rest of the code with articles.

      case 'article':
        if (empty($author_field)) {
          $author_field = 'field_authors_breema';
        }

        $meta_tags[] = ['property' => 'og:type', 'content' => 'article'];
        $authors = $node->get($author_field)->referencedEntities();
        $i = 0;
        $author_names = [];
        foreach ($authors as $author) {
          $author_names[] = $author->label();
          $id = 'article_author_' . $i++;
          $dir_entries = $author->get('field_directory_entry')->referencedEntities();
          if (!empty($dir_entries)) {
            $meta_tags[] = [
              'id' => $id,
              'property' => 'article:author',
              'content' => $dir_entries[0]->toUrl('canonical', ['absolute' => TRUE])->toString(),
            ];
          }
        }
        if (!empty($author_names) && $node->bundle() === 'article') {
          $meta_tags[] = [
            'name' => 'author',
            'content' => breema_fancy_implode($author_names),
          ];
        }
        $meta_tags[] = [
          'property' => 'article:published_time',
          'content' => date('c', $node->get('created')->value),
        ];
        $meta_tags[] = [
          'property' => 'article:modified_time',
          'content' => date('c', $node->get('changed')->value),
        ];
        // @todo Events could "expire" after the end date.
        // article:expiration_time - datetime
        // When the article is out of date after.
        /*
        if ($node->bundle() === 'event') {
          $date_time = $node->get('field_date_time')->getValue();
          // @todo timezone hell.
          $meta_tags[] = [
            'property' => 'article:expiration_time',
            'content' => '', // @todo
          ];
        }
        */
        break;

      default:
        $meta_tags[] = ['property' => 'og:type', 'content' => 'article'];
        break;

    }
  }
  else {
    $meta_tags = [];
    $route = $route_match->getRouteObject();
    $view_id = $route->getDefault('view_id');
    if (!empty($view_id)) {
      $display_id = $route->getDefault('display_id');
      $view = Views::getView($view_id);
      $view->setDisplay($display_id);
      $extenders = $view->getDisplay()->getExtenders();
      if (!empty($extenders['breema_metatag_display_extender'])) {
        // Retrieve the metatag settings from the extender.
        $metatags = $extenders['breema_metatag_display_extender']->getMetatags();
        if (!empty($metatags)) {
          if (!empty($metatags['description'])) {
            $meta_tags[] = ['property' => 'og:description', 'content' => $metatags['description']];
            $meta_tags[] = ['name' => 'description', 'content' => $metatags['description']];
          }
          if (!empty($metatags['image'])) {
            $media_entity = Media::load($metatags['image']);
            if (!empty($media_entity)) {
              $share_image_info = $media_entity->get('field_media_image')->getValue();
              $share_image_file = File::load($share_image_info[0]['target_id']);
            }
          }
        }
      }
    }
  }

  // Since the front page is in fact a node, we need these checks outside the
  // other conditionals so that it always runs for nodes.
  if (!empty($node) && $node instanceof NodeInterface) {
    $description = breema_get_node_meta_description($node);
    if (!empty($description)) {
      $meta_tags[] = ['name' => 'description', 'content' => $description];
      $meta_tags[] = ['property' => 'og:description', 'content' => $description];
    }

    // Find the right image to share.
    // First, if the node type has a field_social_media_image, try to use that.
    if ($node->hasField('field_social_media_image')) {
      $share_image = $node->get('field_social_media_image')->getValue();
      if (!empty($share_image[0]['target_id'])) {
        $share_images = $node->get('field_social_media_image')->referencedEntities();
        if (!empty($share_images[0])) {
          $share_image_files = $share_images[0]->get('field_media_image')->referencedEntities();
          if (!empty($share_image_files)) {
            $share_image_file = $share_image_files[0];
            $share_image_info = $share_images[0]->get('field_media_image')->getValue();
          }
        }
      }
    }
    // Next, if the node type has a field_main_image, try to use that.
    if (empty($share_image_file) && $node->hasField('field_main_image')) {
      $main_image = $node->get('field_main_image')->getValue();
      if (!empty($main_image[0]['target_id'])) {
        $main_images = $node->get('field_main_image')->referencedEntities();
        if (!empty($main_images[0])) {
          $main_image_files = $main_images[0]->get('field_media_image')->referencedEntities();
          if (!empty($main_image_files)) {
            $share_image_file = $main_image_files[0];
            $share_image_info = $main_images[0]->get('field_media_image')->getValue();
          }
        }
      }
    }
    // If we still don't have one, try some bundle-specific fallbacks.
    if (empty($share_image_file)) {
      switch ($node->bundle()) {
        case 'directory_entry':
          // Pull the headshot (if any) from the user.
          $users = $node->get('uid')->referencedEntities();
          $user_pictures = $users[0]->get('user_picture')->referencedEntities();
          if (!empty($user_pictures)) {
            $share_image_file = $user_pictures[0];
            $share_image_info = $users[0]->get('user_picture')->getValue();
          }
          break;

        case 'essence':
          // If this is a product excerpt, use the book cover.
          if ($node->get('field_source_type')->value === 'product') {
            $products = $node->get('field_source_product')->referencedEntities();
            $main_images = $products[0]->get('field_main_image')->referencedEntities();
            $main_image_files = $main_images[0]->get('field_media_image')->referencedEntities();
            if (!empty($main_image_files)) {
              $share_image_file = $main_image_files[0];
              $share_image_info = $main_images[0]->get('field_media_image')->getValue();
            }
          }
          // If it's still empty (not a product, or oddly, the product didn't
          // have a main_image), use the standard "Essence of Breema" image.
          if (empty($share_image_file)) {
            // @todo Make this configurable? Or at least a slick constant?
            $default_essence_media = Media::load(1092);
            $share_image_info = $default_essence_media->get('field_media_image')->getValue();
            $share_image_file = File::load($share_image_info[0]['target_id']);
          }
          break;
      }
    }
  }

  // If we found something, use it.
  if (!empty($share_image_file)) {
    $meta_tags = array_merge(
      $meta_tags,
      [
        ['property' => 'twitter:card', 'content' => 'summary_large_image'],
        ['property' => 'og:image', 'content' => $share_image_file->url()],
        [
          'property' => 'og:image:type',
          'content' => $share_image_file->getMimeType(),
        ],
        [
          'property' => 'og:image:width',
          'content' => $share_image_info[0]['width'],
        ],
        [
          'property' => 'og:image:height',
          'content' => $share_image_info[0]['height'],
        ],
      ]
    );
  }
  else {
    // No image, tell Twitter to use the regular 'summary' card type.
    $meta_tags[] = ['property' => 'twitter:card', 'content' => 'summary'];
  }

  // Global properties, regardless of page:
  $meta_tags[] = ['property' => 'og:site_name', 'content' => $site_name];
  $meta_tags[] = ['property' => 'fb:app_id', 'content' => BREEMA_FB_APP_ID];
  $meta_tags[] = ['property' => 'twitter:site', 'content' => '@BreemaCenter'];
  $meta_tags[] = ['property' => 'twitter:creator', 'content' => '@BreemaCenter'];

  // Finally, set all the meta tags we found for this page.
  foreach ($meta_tags as $meta_tag) {
    if (!empty($meta_tag['id'])) {
      $id = $meta_tag['id'];
      unset($meta_tag['id']);
    }
    elseif (!empty($meta_tag['name'])) {
      $id = $meta_tag['name'];
    }
    else {
      $id = $meta_tag['property'];
    }
    $variables['page']['#attached']['html_head'][] = [
      ['#tag' => 'meta', '#attributes' => $meta_tag],
      $id,
    ];
  }
}

/**
 * Gets the right meta description to use for a given node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node to use.
 * @return string
 *   The meta description.
 */
function breema_get_node_meta_description(NodeInterface $node) {
  $description = '';
  $parts = [];
  $renderer = \Drupal::service('renderer');

  switch ($node->getType()) {

    case 'directory_entry':
      $description = breema_get_node_summary($node, 'body');
      if (empty($description)) {
        $view_options = [
          'label' => 'hidden'
        ];
        $certs = $node->get('field_certification')->getValue();
        if (!empty($certs)) {
          $cert_strings = [];
          $cert_view = $node->get('field_certification')->view($view_options);
          foreach (Element::children($cert_view) as $key) {
            $cert_strings[] = $cert_view[$key]['#markup'];
          }
          $parts[] = implode(', ', $cert_strings);
        }
        $address = $node->get('field_address')->getValue();
        if (!empty($address)) {
          //$view_options['type'] = 'address_compact';
          $address_view = $node->get('field_address')->view($view_options);
          $parts[] = trim($renderer->renderPlain($address_view));
        }
      }
      break;

    case 'event':
      $subtitle = $node->get('field_subtitle')->value;
      if (!empty($subtitle)) {
        $parts[] = $subtitle;
      }

      $parts[] = breema_get_compact_date_only($node);

      $location = $node->get('field_location')->view([
        'label' => 'hidden',
        'type' => 'entity_reference_entity_view',
        'settings' => [
          'view_mode' => 'teaser_compact',
          'link' => FALSE,
        ],
      ]);
      $parts[] = trim($renderer->renderPlain($location));

      $summary = breema_get_node_summary($node, 'body');
      if (!empty($summary)) {
        $parts[] = $summary;
      }
      break;

    default:
      if ($node->hasField('field_meta_summary')) {
        $meta_summary = $node->get('field_meta_summary')->getValue();
        if (!empty($meta_summary[0]['value'])) {
          // This is always a plain text field, so we don't have text filters.
          $description = $meta_summary[0]['value'];
        }
      }
      if (empty($description) && $node->hasField('body')) {
        $description = breema_get_node_summary($node, 'body');
      }
      else {
        // Neither field_meta_summary nor body.
        // Not currently a problem, all our node types have 1 or the other.
        // @todo
      }
      break;

  }

  if (empty($description) && !empty($parts)) {
    $description = implode(' ~ ', $parts);
  }

  // Strip tags.
  $description = strip_tags(str_replace('<', ' <', $description));

  // Strip out line breaks.
  $description = preg_replace('/\n|\r|\t/m', ' ', $description);

  // Strip out non-breaking spaces.
  $description = str_replace('&nbsp;', ' ', $description);
  $description = str_replace("\xc2\xa0", ' ', $description);

  // Strip out extra spaces.
  $description = trim(preg_replace('/\s\s+/', ' ', $description));

  return trim($description);
}

/**
 * Gets the compact date-only string for a given event node.
 *
 * @param \Drupal\node\NodeInterface $event
 *   The event node to use.
 * @return string
 *   The compact date-only representation of the date range.
 *
 * @todo Remove this when compact_daterange formatter handles this better.
 */
function breema_get_compact_date_only(NodeInterface $event) {
  $date_time = $event->get('field_date_time')->getValue();
  $start_time = new DrupalDateTime($date_time[0]['value']);
  $end_time = new DrupalDateTime($date_time[0]['end_value']);
  $start_date = $start_time->format('j F Y');
  $end_date = $end_time->format('j F Y');
  // Start and end on the same date, only show the 1 value.
  if ($start_date === $end_date) {
    return $start_date;
  }
  $start_year = $start_time->format('Y');
  $end_year = $end_time->format('Y');
  if ($start_year !== $end_year) {
    // Nothing to compact, have to use the full version of both.
    return $start_date . ' - ' . $end_date;
  }
  $start_mon = $start_time->format('F');
  $end_mon = $end_time->format('F');
  if ($start_mon !== $end_mon) {
    // Same year, but have to use the full day and month for each.
    $start_date = $start_time->format('j F');
    return $start_date . ' - ' . $end_date;
  }
  // Same year and month, only need the start day (and no spaces around -).
  $start_date = $start_time->format('j');
  return $start_date . '-' . $end_date;
}

/**
 * Gets the summary to use for a certain field on a given node.
 *
 * If the explicit summary is defined, use it. Otherwise, trim the full value.
 * This is evil -- wish there was a simple API for this.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node to use.
 * @param string $field_name
 *   The machine name of the field to use.
 * @return string
 *   The summary.
 *
 * @todo Replace this with something better when core has a good solution.
 */
function breema_get_node_summary(NodeInterface $node, $field_name) {
  $summary = '';
  $field_value = $node->get($field_name)->getValue();
  if (!empty($field_value[0]['summary'])) {
    $build = [
      '#type' => 'processed_text',
      '#text' => $field_value[0]['summary'],
      '#format' => $field_value[0]['format'],
    ];
    $summary = \Drupal::service('renderer')->renderPlain($build);
  }
  elseif (!empty($field_value[0]['value'])) {
    $summary = text_summary($field_value[0]['value'], $field_value[0]['format'], 300);
  }
  return $summary;
}

/**
 * Implements hook_preprocess_HOOK() for nodes.
 *
 * Calls out to bundle-specific functions.
 */
function breema_preprocess_node(&$variables) {
  if (substr($variables['view_mode'], 0, 6) == 'teaser') {
    // Our teasers are generally constructed to make the entire article (the
    // containing tag) a link, so we need to strip most HTML from whatever is
    // being rendered in here. Preserve cosmetic HTML, but remove links and
    // embedded entities.
    foreach ($variables['content'] as $field_name => $field) {
      if (!empty($variables['content'][$field_name][0]['#text'])) {
        breema_strip_links($variables['content'][$field_name][0]['#text']);
      }
    }
  }

  switch ($variables['node']->getType()) {
    case 'essence':
      breema_preprocess_node_essence($variables);
      break;

    case 'event':
      breema_preprocess_node_event($variables);
      break;

    case 'product':
      breema_preprocess_node_product($variables);
      break;

  }
}

/**
 * Preprocess function for essence nodes.
 *
 * Set the title to only use the date for teaser versions.
 */
function breema_preprocess_node_essence(&$variables) {
  if ($variables['view_mode'] === 'teaser') {
    // Strip off the 'Essence of Breema: ' part of the title on teasers.
    // E.g., we don't need to see that duplicated on /about-breema/essence.
    $variables['label'][0]['#context']['value'] = str_replace('Essence of Breema: ', '', $variables['label'][0]['#context']['value']);
  }
}

/**
 * Preprocess function for event nodes.
 *
 * Special handling for field_parent_event and field_subtitle on schedule nodes.
 * If there are required hours, cleanup how that is displayed.
 * Magic for rendering info about instructors (e.g. as links to directory
 * entries).
 */
function breema_preprocess_node_event(&$variables) {
  if (!empty($variables['node']->get('field_parent_event')->getValue())) {
    $variables['content']['field_subtitle']['#access'] = FALSE;
  }
  // If the event has a registration link, make it a primary action.
  if (!empty($variables['content']['field_registration_link'][0])) {
    $variables['content']['field_registration_link']['#attributes'] = [
      'class' => ['action', 'action--primary'],
    ];
  }
  if ($variables['view_mode'] == 'full') {
    if (!empty($variables['content']['field_parent_event'][0])) {
      $variables['content']['field_parent_event']['#title'] = t('Part of the');
    }
    if (!empty($variables['content']['field_required_hours'][0])) {
      $hours = $variables['node']->field_required_hours->get(0)->value;
      if (!empty($hours)) {
        $variables['content']['field_required_hours'] = [
          '#type' => 'markup',
          '#prefix' => '<div class="field-name-field-required-hours>',
          '#markup' => new PluralTranslatableMarkup($hours, '1 class hour required.', '@hours class hours required.', ['@hours' => $hours]),
          '#suffix' => '</div>',
          '#weight' => $variables['content']['field_required_hours']['#weight'],
        ];
      }
      else {
        $variables['content']['field_required_hours']['#access'] = FALSE;
      }
    }
  }
  if (!empty($variables['content']['field_instructors'])) {
    $instructors = $variables['node']->get('field_instructors')->referencedEntities();
    if (!empty($instructors)) {
      $instructor_label = count($instructors) == 1 ? t('Instructor') : t('Instructors');
      $label_callback = $variables['view_mode'] == 'full' ? 'breema_entity_label_instructor_directory_entry' : 'breema_entity_label_plain';
      $variables['content']['field_instructors'] = [
        '#type' => 'markup',
        '#prefix' => '<div>',
        // Using the normal plural formatting class (PluralTranslatableMarkup)
        // auto-sanitizes and breaks our links. So we manually check the count
        // and do this "raw". This would be broken for RTL languages, but we
        // won't worry about that for now.
        '#markup' => $instructor_label . ': ' . breema_get_entity_label_multiple($instructors, $label_callback),
        '#suffix' => '</div>',
        '#weight' => isset($variables['content']['field_instructors']['#weight']) ? $variables['content']['field_instructors']['#weight'] : 0,
      ];
      // If we're on the 'full' view of an event, conditionally inject
      // instructor bios.
      if ($variables['view_mode'] == 'full' && !empty($variables['node']->get('field_display_instructor_bios')->value)) {
        $variables['content']['instructor_bios'] = [
          '#type' => 'container',
          '#weight' => 100,
          'header' => [
            '#weight' => -10,
            '#prefix' => '<h2>',
            '#markup' => $instructor_label,
            '#suffix' => '</h2>',
          ],
        ];
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
        foreach ($instructors as $instructor) {
          $directory_entries = $instructor->get('field_directory_entry')->referencedEntities();
          if (!empty($directory_entries)) {
            $directory_entry = array_pop($directory_entries);
            $variables['content']['instructor_bios'][$instructor->id()] = $view_builder->view($directory_entry, 'teaser_compact');
          }
          else {
            $variables['content']['instructor_bios'][$instructor->id()] = [
              '#markup' => '<h3>' . $instructor->label() . '</h3>',
            ];
          }
        }
      }
    }
  }
}

/**
 * Preprocess function for product nodes.
 *
 * Looks up and injects the 'Buy now' link from the 1st product info paragraph
 * into the 'compact teaser' or 'embed' of the main product itself.
 */
function breema_preprocess_node_product(&$variables) {
  if ($variables['view_mode'] === 'teaser_compact' || $variables['view_mode'] === 'embed') {
    $all_product_info = $variables['node']->get('field_product_info')->referencedEntities();
    // Always use the first / top product info paragraph for 'Buy now' link.
    $buy_now_link = $all_product_info[0]->get('field_buy_now')->getValue();
    $variables['content']['buy_now'] = [
      '#type' => 'link',
      '#title' => t('Buy now'),
      '#url' => Url::fromUri($buy_now_link[0]['uri']),
      '#prefix' => '<div class="action action--primary">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for file bundle media entities.
 */
function breema_preprocess_media__file(&$variables) {
  if (substr($variables['view_mode'], 0, 5) == 'view_') {
    $variables['content']['field_media_file'][0]['#description'] = $variables['content']['name'][0]['#context']['value'];
    $variables['content']['name']['#access'] = FALSE;
  }
}

/**
 * Preprocess function for users.
 *
 * If the user has a directory entry, hide the (now duplicate) user_picture.
 */
function breema_preprocess_user(&$variables) {
  if (!empty($variables['user']->get('field_directory_entry')->getValue())) {
    $variables['content']['user_picture']['#access'] = FALSE;
  }
}

/**
 * Preprocess function for fields.
 */
function breema_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#field_name'] == 'field_product') {
    $variables['attributes']['class'][] = 'grid--container';
    $variables['attributes']['class'][] = 'grid--container-1-2';
  }
  if ($variables['element']['#field_name'] == 'field_media_3') {
    $variables['attributes']['class'][] = 'grid--container';
    $variables['attributes']['class'][] = 'grid--container-1-3';
  }
  if ($variables['element']['#field_name'] == 'field_tiles') {
    $variables['attributes']['class'][] = 'grid--container';
    $variables['attributes']['class'][] = 'grid--container-1-2-3';
  }
}

/**
 * Preprocess function for all paragraphs.
 *
 * If 'field_link' exists, set $variables['url'] with it.
 * If 'field_header_text' exists, wrap it in h2.
 * If 'field_subheader' exists, wrap it in h3.
 * If a 'Buy now' link exists, make it a primary action.
 * If 'field_media_align' exists, set a class based on the value.
 * Invoke any bundle-specific preprocess if we're not default view mode.
 */
function breema_preprocess_paragraph(&$variables) {
  $paragraph_type = $variables['paragraph']->getParagraphType()->id();

  if (!empty($variables['content']['field_header_text'])) {
    $variables['content']['field_header_text']['#prefix'] = '<h2>';
    $variables['content']['field_header_text']['#suffix'] = '</h2>';
  }
  if (!empty($variables['content']['field_subheader'])) {
    $variables['content']['field_subheader']['#prefix'] = '<h3>';
    $variables['content']['field_subheader']['#suffix'] = '</h3>';
  }
  if ($variables['paragraph']->hasField('field_link')) {
    $link = $variables['paragraph']->get('field_link')->getValue();
    if (!empty($link)) {
      $url = Url::fromUri($link[0]['uri']);
      $variables['url'] = $url->toString();
    }
  }
  // Turn 'Buy now' links into primary action buttons.
  if (!empty($variables['content']['field_buy_now'])) {
    $variables['content']['field_buy_now']['#attributes']['class'] = [
      'action',
      'action--primary',
    ];
  }

  // Strip the description to cosmetic tags only (no links or media).
  if ($paragraph_type !== 'text' && !empty($variables['content']['field_description'][0])) {
    breema_strip_links($variables['content']['field_description'][0]['#text']);
  }

  if ($variables['paragraph']->hasField('field_media_align')) {
    $align = $variables['paragraph']->get('field_media_align')->value;
    $variables['attributes']['class'][] = 'media-align-' . $align;
  }

  // Unfortunately, when using non-default view mode, this preprocess hook isn't
  // automatically getting invoked, so we have to do it manually.
  if ($variables['view_mode'] !== 'default') {
    $function = 'breema_preprocess_paragraph__' . $paragraph_type;
    if (function_exists($function)) {
      $function($variables);
    }
  }
}

/**
 * Preprocess function for 'Featured events' paragraph type.
 *
 * Injects the list display of the 'breema_events_featured' view.
 * Injects links to the /events/* pages (calendar, map + search).
 */
function breema_preprocess_paragraph__event_featured(&$variables) {
  $display = 'block_list';
  $view = Views::getView('breema_events_featured');
  $view->setDisplay($display);
  $view->execute();
  if (count($view->result)) {
    $variables['content'][$display] = $view->preview($display);
  }
  $variables['content']['actions'] = _breema_get_more_events_action_links();
}

/**
 * Preprocess function for 'Person' paragraph type.
 *
 * Injects list of upcoming events (if any).
 */
function breema_preprocess_paragraph__person(&$variables) {
  $user_entities = $variables['paragraph']->get('field_person')->referencedEntities();
  $user_entity = array_pop($user_entities);
  if (!empty($user_entity)) {
    $directory_entries = $user_entity->get('field_directory_entry')->referencedEntities();
    $directory_entry = array_pop($directory_entries);
  }

  $show_upcoming = $variables['paragraph']->get('field_show_upcoming_events')->value;
  if (!empty($show_upcoming)) {
    $display = 'embed_upcoming';
    $view = Views::getView('breema_event_dashboard');
    $view->setDisplay($display);
    if (!empty($user_entity)) {
      $id = $user_entity->id();
      $view->setArguments([$id, $id]);
    }
    $view->execute();
    if (count($view->result)) {
      $variables['upcoming'][$display] = [
        '#prefix' => '<h3>' . t('Upcoming events with :name', [':name' => $user_entity->label()]) . '</h3>',
        'content' => $view->preview($display),
      ];
      if (!empty($directory_entry)) {
        $variables['upcoming']['read-more'] = [
          '#weight' => 10,
          '#prefix' => '<div class="more-link">',
          '#markup' => $directory_entry->toLink(t('More events'))->toString(),
          '#suffix' => '</div>',
        ];
      }
    }
  }
}

/**
 * Preprocess function for 'Media: single' paragraph type.
 *
 * Sets up template variables based on size and layout values.
 */
function breema_preprocess_paragraph__media_single(&$variables) {
  $layout = $variables['paragraph']->get('field_media_layout')->value;
  $size = $variables['paragraph']->get('field_media_size')->value;
  switch ($size) {
    case '1/3':
      $view_mode = 'view_small';
      break;

    case '1/2':
      // This is the default view_mode, so nothing to do.
      break;

    case '2/3':
      $view_mode = 'view_large';
      break;

    case 'full':
      $view_mode = 'view_full';
      // Full width implies we have to use vertical layout.
      $layout = 'vertical';
      break;
  }

  if ($layout !== 'vertical') {
    $grid_classes[] = 'grid--container';
    switch ($size) {
      case '1/3':
        $grid_classes[] = 'grid--container-1-' . ($layout === 'left' ? '2u3366' : '2u6633');
        break;

      case '1/2':
        // Layout doesn't impact which grid container.
        $grid_classes[] = 'grid--container-1-2';
        break;

      case '2/3':
        $grid_classes[] = 'grid--container-1-' . ($layout === 'left' ? '2u6633' : '2u3366');
        break;
    }
    $variables['grid_attributes'] = new Attribute();
    $variables['grid_attributes']->addClass($grid_classes);
  }

  if (isset($view_mode) && !empty($variables['content']['field_media'][0])) {
    // @todo This is dangerous and Wrong(tm). It'd be better to be getting a
    // fresh render array here with the right view mode in the first place.
    // Short of that, if we're going to dynamically mess with #view_mode, we
    // also have to update the cache keys, or Drupal will cache a render array
    // for the wrong view mode.
    $variables['content']['field_media'][0]['#view_mode'] = $view_mode;
    // @todo We should probably be more careful, but we know that the 4th item
    // (index 3) in the keys array is the view mode, so we can save the expense
    // of finding 'view_medium' and replacing it by directly targetting the
    // right item.
    if (!empty($variables['content']['field_media'][0]['#cache'])) {
      $variables['content']['field_media'][0]['#cache']['keys'][3] = $view_mode;
    }
  }

  // If we're using a grid (e.g. not 'vertical'), depending on the layout, put
  // the media content in the correct variable.
  if (!empty($grid_classes) && !empty($variables['content']['field_media'])) {
    $content_media = $variables['content']['field_media'];
    unset($variables['content']['field_media']);
    if ($layout === 'left') {
      $variables['content_one'] = $content_media;
    }
    else {
      $variables['content_one'] = $variables['content'];
      $variables['content'] = $content_media;
    }
  }
}

/**
 * Preprocess function for 'Essence: single' paragraph type.
 *
 * Sets up template variables.
 */
function breema_preprocess_paragraph__essence_single(&$variables) {
  $grid_classes = ['grid--container', 'grid--container-1-2u3366'];
  $variables['grid_attributes'] = new Attribute();
  $variables['grid_attributes']->addClass($grid_classes);
}

/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter() for paragraphs.
 *
 * Defines better #cache tags for the 'recurring_event_tile' paragraph bundle.
 */
function breema_paragraph_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
  if ($entity->bundle() === 'recurring_event_tile') {
    $build['#cache']['tags'][] = $entity->get('parent_type')->value . ':' . $entity->get('parent_id')->value;
    // @todo: Smarter #cache tags for the recurring events themselves.
    // E.g. an event-specific tag, or event an event/location specific one.
    $build['#cache']['tags'][] = 'node_list';
    // Cache this paragraph for at most 1 hour.
    // @todo This doesn't do anything for page_cache.
    // @see https://www.drupal.org/project/drupal/issues/2352009
    // @see https://www.drupal.org/project/drupal/issues/2835068
    // ... :(
    $build['#cache']['max-age'] = 3600;
    // So, we brute force it by setting a custom cache tag we can invalidate
    // via hook_cron(). OMFG.
    $build['#cache']['tags'][] = 'breema_max_age';
  }
}

/**
 * Preprocess function for 'Recurring event tile' paragraph bundle.
 *
 * Sets up template variables, in particular finding the right URL to use.
 * This will be properly cached, so we can always run the query in here.
 *
 * @see breema_find_next_event()
 */
function breema_preprocess_paragraph__recurring_event_tile(&$variables) {
  $location = $variables['paragraph']->get('field_location')->getValue();
  $location = !empty($location[0]['target_id']) ? $location[0]['target_id'] : NULL;
  $category = $variables['paragraph']->get('field_event_category')->getValue();
  $category = !empty($category[0]['target_id']) ? $category[0]['target_id'] : NULL;
  $day_of_week = $variables['paragraph']->get('field_day_of_week')->value;
  $start_time = $variables['paragraph']->get('field_start_time')->value;
  $next_event = breema_find_next_event($day_of_week, $location, $category, $start_time);
  if (!empty($next_event)) {
    $variables['url'] = $next_event->toUrl()->toString();
  }
}

/**
 * Generate a render array of inline action links to see more Breema events.
 */
function _breema_get_more_events_action_links() {
  $render = [
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => ['class' => ['container-inline']],
    'header' => [
      '#weight' => -10,
      '#prefix' => '<h3>',
      '#markup' => t('More Breema events'),
      '#suffix' => '</h3>',
    ],
  ];
  $actions = [
    'calendar' => '/events/calendar',
    'list' => '/events',
    'map' => '/directory/map?type[]=event',
  ];
  foreach ($actions as $action => $action_path) {
    $render[$action] = [
      '#prefix' => '<div class="action action--secondary inline">',
      '#type' => 'link',
      '#url' => Url::fromUri('internal:' . $action_path),
      // @todo This isn't translatable.
      '#title' => Unicode::ucfirst($action),
      '#suffix' => '</div>',
    ];
  }
  return $render;
}

/**
 * Implements hook_theme().
 */
function breema_theme($existing, $type, $theme, $path) {
  return [
    'breema_send' => [
      'variables' => [
        'recipient' => NULL,
        'header' => NULL,
        'content' => NULL,
        'footer' => NULL,
        'entity' => NULL,
        'view_mode' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_breema_send().
 *
 * Setup template variables for the breema send email template.
 */
function breema_preprocess_breema_send(&$variables) {
  $variables['front_page'] = Url::fromUri('internal:/', ['absolute' => TRUE])->toString();
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  $css_path = drupal_get_path('theme', 'breema2') . '/css/email-send.css';
  $css_optimizer = new CssOptimizer();
  $variables['inline_css'] = $css_optimizer->loadFile($css_path, TRUE);
}

/**
 * Implements hook_theme_registry_alter()
 */
function breema_theme_registry_alter(&$theme_registry) {
  $breema_path = drupal_get_path('module', 'breema') . '/templates';
  $theme_registry['field__paragraph__field_book_type'] = [
    'path' => $breema_path,
    'template' => 'field--paragraph--field-book-type',
  ] + $theme_registry['field'];
  $theme_registry['field__paragraph__field_description'] = [
    'path' => $breema_path,
    'template' => 'field--paragraph--field-description',
  ] + $theme_registry['field'];
  $theme_registry['geolocation_common_map_display']['path'] = $breema_path;
  $theme_registry['paragraph__product_info_audio'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-audio',
  ] + $theme_registry['paragraph'];
  $theme_registry['paragraph__product_info_book'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-book',
  ] + $theme_registry['paragraph'];
  $theme_registry['paragraph__product_info_general'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-general',
  ] + $theme_registry['paragraph'];
}

/**
 * Implements hook_views_pre_render().
 */
function breema_views_pre_render(ViewExecutable $view) {
  if (isset($view)) {
    switch ($view->storage->id()) {
      case 'breema_event_browser':
      case 'breema_media_browser':
      case 'breema_media_browser_audio':
      case 'breema_media_browser_private':
      case 'breema_place_browser':
        $view->element['#attached']['library'][] = 'breema/entity-browser';
        break;

      case 'breema_directory':
        return breema_views_pre_render_breema_directory($view);

      case 'breema_events_by_instructor':
        return breema_views_pre_render_breema_events_by_instructor($view);

      case 'breema_events_by_location':
        return breema_views_pre_render_breema_events_by_location($view);

      case 'breema_events_featured':
        // We want this on both the block *and* page, so don't check the display.
        $view->attachment_after['more_events'] = _breema_get_more_events_action_links();
        break;

    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function breema_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  if ($view->storage->id() === 'user_admin_online') {
    // Inject a 2nd "attachment" with the query count on the page display.
    if ($view->current_display === 'page_1') {
      // The attachment contains the count of online users without any filters.
      // If there's a reset button visible, there are some filters applied, so
      // show a (plural) message about the # of users matching the search. This
      // also handles the no results message, since we only hit that case with
      // filters applied.
      if (!isset($variables['exposed']['actions']['reset']['#access'])) {
        $variables['attachment_before']['filter_result'] = [
          '#markup' => new PluralTranslatableMarkup(
            $view->total_rows,
            'There is currently 1 user online that matches your search.',
            'There are currently @count users online that match your search.',
            ['@count' => $view->total_rows]
          ),
          '#weight' => 1,
          '#prefix' => '<p>',
          '#suffix' => '</p>',
        ];
      }
    }
    // Fix the attachment display.
    elseif ($view->current_display === 'attachment_1') {
      // Hide the result rows themselves (the bogus UID field).
      unset($variables['rows']);
      // Fix the header (plural + <p> tags).
      $variables['header']['result'] = [
        '#markup' => new PluralTranslatableMarkup(
          $view->total_rows,
          'There is currently 1 user online.',
          'There are currently @count total users online.',
          ['@count' => $view->total_rows]
        ),
        '#prefix' => '<p>',
        '#suffix' => '</p>',
        '#weight' => 0,
      ];
    }
  }
  elseif ($view->storage->id() === 'breema_event_transfer_credit_administration'&& $view->current_display === 'page_1') {
    $variables['header']['display_link']['#options']['attributes']['class'][] = 'button';
    $variables['header']['display_link']['#options']['attributes']['class'][] = 'button--primary';
  }
}

/**
 * Implements hook_views_pre_render() for breema_events_by_instructor.
 *
 * On the 'block_map' display, inject the instructor's directory entry, if any.
 */
function breema_views_pre_render_breema_events_by_instructor(ViewExecutable $view) {
  if ($view->current_display == 'block_map') {
    $user_argument = $view->display_handler->getHandler('argument', 'field_instructors_target_id');
    if (!empty($user_argument)) {
      $instructor = User::load($user_argument->getValue());
      if (!empty($instructor)) {
        $directory_entries = $instructor->get('field_directory_entry')->referencedEntities();
        if (!empty($directory_entries)) {
          $directory_entry = array_pop($directory_entries);
          $result = new ResultRow();
          // Pretend this is the location for an event, since it has all the
          // same fields we need: title, address and geolocation.
          $result->_relationship_entities['field_location'] = $directory_entry;
          $result->index = count($view->result);
          if (empty($view->result)) {
            $gmap_settings = &$view->display_handler->getPlugin('style')->options['google_map_settings'];
            $gmap_settings['width'] = '300px';
            $gmap_settings['height'] = '300px';
            $gmap_settings['maxZoom'] = 10;
          }
          $view->result[] = $result;
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render() for breema_events_by_location.
 *
 * Only start doing a grid for upcoming events if there are more than 3.
 */
function breema_views_pre_render_breema_events_by_location(ViewExecutable $view) {
  if ($view->current_display == 'block_1') {
    $settings = &$view->display_handler->getPlugin('style')->options;
    if (count($view->result) < 3) {
      $settings['class'] = 'grid--container'; // not grid--container-1-2
    }
  }
}

/**
 * Implements hook_views_pre_render() for breema_directory
 *
 * Since the map display is configured to show the map even when the view is
 * empty, we're not seeing the empty text (e.g. if you zoom in too far or over a
 * country without any Breema people/events). Therefore, if we notice the
 * results are empty, we move the 'empty' handler(s) to the view's footer.
 */
function breema_views_pre_render_breema_directory(ViewExecutable $view) {
  if ($view->current_display === 'page_map') {
    if (empty($view->result)) {
      // Move the empty area handler to the footer (so it'll be rendered).
      $view->footer = $view->empty;
    }
  }
}

/**
 * Implements hook_form_alter()
 */
function breema_form_alter(&$form, FormStateInterface $form_state) {
  if (substr($form['#form_id'], 0, 15) == 'entity_browser_') {
    breema_entity_browser_form_alter($form, $form_state);
  }
  if (!empty($form['field_website']['widget']['add_more']['#value'])) {
    $form['field_website']['widget']['add_more']['#value'] = t('Add another website');
  }
}

/**
 * Form alter helper for all entity_browser forms.
 *
 * Duplicates the action buttons at the top of the form (to help w/ scrolling).
 */
function breema_entity_browser_form_alter(&$form, FormStateInterface $form_state) {
  if (!empty($form['widget']['view'])) {
    $form['widget']['top_actions'] = $form['widget']['actions'];
    $form['widget']['top_actions']['#weight'] = -10;
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 *
 * Invokes the directory_entry form alter method with the right user entity.
 */
function breema_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface &$form_state) {
  if ($entity_form['#entity_type'] == 'node' && !empty($entity_form['#bundle'])) {
    if (!empty($entity_form['field_website']['widget']['add_more']['#value'])) {
      $entity_form['field_website']['widget']['add_more']['#value'] = t('Add another website');
    }
    if ($entity_form['#bundle'] == 'directory_entry') {
      $user = $form_state->getFormObject()->getEntity();
      $entity_form['uid']['widget'][0]['target_id']['#default_value'] = $user;
      breema_directory_entry_node_form_alter($entity_form, $form_state, $user, $entity_form['#entity'], TRUE);
    }
  }
  if ($entity_form['#entity_type'] === 'media'
      && !empty($entity_form['#bundle'])
      && $entity_form['#bundle'] === 'file'
  ) {
    breema_file_media_form_alter($entity_form, $form_state);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'contact_message_personal_form'.
 *
 * Adds a help message when users are on their own contact form.
 */
function breema_form_contact_message_personal_form_alter(&$form, FormStateInterface $form_state) {
  $current_user = \Drupal::currentUser();
  $target = $form_state->getFormObject()->getEntity()->get('recipient')->getValue();
  if ($current_user->id() === $target[0]['target_id']) {
    \Drupal::messenger()->addStatus(t('This page is how site visitors can contact you without knowing your e-mail address. It is available here for you to see how it works and to test that you get the messages.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'node_form'.
 */
function breema_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  // Find the appropriate user entity and invoke the shared method.
  if ($node->bundle() === 'directory_entry') {
    $authors = $node->get('uid')->referencedEntities();
    $author = array_pop($authors);
    breema_directory_entry_node_form_alter($form, $form_state, $author, $node, FALSE);
  }
  // Products have a special #after_build callback.
  else if ($node->bundle() === 'product') {
    $form['field_by']['widget'][0]['#after_build'][] = 'breema_hide_format_after_build';
  }
  // Schedule events (with a parent) can't access their title, require subtitle.
  else if ($node->bundle() === 'event') {
    if (!empty($form['field_parent_event']['widget'][0]['target_id']['#default_value'])) {
      $form['title']['#access'] = FALSE;
      $form['field_subtitle']['widget'][0]['value']['#required'] = TRUE;
    }
    // Instead of relying on (unstable) field_group, use #description_display to
    // get the help text for this field (on events) to be before the element.
    $form['field_website']['widget']['#description_display'] = 'before';
    $form['field_website']['#description_display'] = 'before';
    $form['field_instructors']['widget']['add_more']['#value'] = t('Add another instructor');

    // If the location is set to The Breema Center (nid 2), hide the checkbox
    // for 'Breema Center sponsored', since we'll force it to FALSE. It'd be
    // confusing to set this checkbox on events @ the BC, and adds clutter/noise
    // when viewing the event (on full event pages and the admin report).
    $form['field_breema_center_sponsored']['#states'] = [
      'invisible' => [
        ':input[name="field_location[target_id]"]' => ['value' => 'node:2'],
      ],
    ];
  }
  elseif ($node->bundle() === 'essence') {
    $form['field_source_product']['#states'] = [
      'visible' => [
        ':input[name="field_source_type"]' => ['value' => 'product'],
      ],
    ];
    $form['field_source_other']['#states'] = [
      'visible' => [
        ':input[name="field_source_type"]' => ['value' => 'other'],
      ],
    ];
    $form['#validate'][] = 'breema_essence_node_form_validate';
  }
  // Hide the format on 'Other authors' for article nodes.
  elseif ($node->bundle() == 'article') {
    foreach (Element::children($form['field_authors_other']['widget']) as $key) {
      if (is_int($key)) {
        $form['field_authors_other']['widget'][$key]['#after_build'][] = 'breema_hide_format_after_build';
      }
    }
    $form['field_source_name']['widget'][0]['#after_build'][] = 'breema_hide_format_after_build';
    $form['field_authors_other']['widget']['add_more']['#value'] = t('Add another author');
    $form['field_authors_breema']['widget']['add_more']['#value'] = t('Add another Breema author');
  }
  // Special case for front page (layout page):
  elseif ($node->id() == 1007) {
    // The front page should *never* be added to any groups, so hide the
    // 'Groups' computed field widget.
    $form['group_content']['#access'] = FALSE;
  }
}

/**
 * Additional validate handler for Essence of Breema node forms.
 */
function breema_essence_node_form_validate($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  if (!empty($values['field_source_type'][0]['value'])
      && $values['field_source_type'][0]['value'] == 'product'
      && empty($values['field_source_product'][0]['target_id'])
  ) {
    $form_state->setErrorByName('field_source_product', t('If this excerpt is from a book, you must define the product.'));
  }
}

/**
 * Alter a directory_entry node form, regardless of IEF or stand-alone.
 *
 * @param array $form
 *   Reference to the form array to alter.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param \Drupal\user\UserInterface $user
 *   The user entity that the directory entry is attached to.
 * @param \Drupal\node\NodeInterface $directory_entry
 *   The directory entry node entity.
 * @param boolean $is_inline
 *   Is the directory_entry form being rendered inline with the user profile?
 */
function breema_directory_entry_node_form_alter(&$form, FormStateInterface $form_state, UserInterface $user, NodeInterface $directory_entry, $is_inline = FALSE) {
  if ($is_inline) {
    $route = '<current>';
    $route_args = [];
  }
  else {
    $route = 'entity.user.edit_form';
    $route_args = ['user' => $user->id()];
    $url_options['query']['destination'] = \Drupal::destination()->get();
  }
  $url_options['fragment'] = 'edit-mail';
  $email_url = Url::fromRoute($route, $route_args, $url_options)->toString();
  $url_options['fragment'] = 'edit-user-contact-wrapper';
  $contact_url = Url::fromRoute($route, $route_args, $url_options)->toString();

  if (!$is_inline) {
    if (!$directory_entry->isPublished()) {
      $form['warning'] = [
        '#type' => 'markup',
        '#markup' => _breema_get_directory_entry_warning('edit-form', $directory_entry),
        '#prefix' => '<div class="messages messages--warning">',
        '#suffix' => '</div>',
        '#weight' => '-100',
      ];
    }
    $url_options['fragment'] = 'edit-user-picture-wrapper';
    $headshot_url = Url::fromRoute($route, $route_args, $url_options)->toString();
    $form['headshot'] = [
      '#type' => 'details',
      '#title' => t('Headshot image'),
      '#open' => TRUE,
      '#weight' => 9,
    ];
    $user_pictures = $user->get('user_picture')->referencedEntities();
    if (!empty($user_pictures)) {
      $user_picture = array_pop($user_pictures);
      $form['headshot']['current'] = [
        '#theme' => 'image_style',
        '#style_name' => '128x128_tiny',
        '#weight' => -1,
        '#prefix' => '<div class="headshot">',
        '#suffix' => '</div>',
        '#uri' => $user_picture->getFileUri(),
      ];
      $form['headshot']['help'] = [
        '#type' => 'item',
        '#description' => t('To change the headshot image that appears in your directory listing, go to the <a href=":edit">Edit tab of your Profile page</a> and modify the <em>Picture</em> field.', [':edit' => $headshot_url]),
      ];
    }
    else {
      $form['headshot']['help'] = [
        '#type' => 'item',
        '#description' => t('To have a headshot image appear in your directory listing, go to the <a href=":edit">Edit tab of your Profile page</a> and add it in the <em>Picture</em> field.', [':edit' => $headshot_url]),
      ];
    }
  }

  // If not already defined, set default values for first and last name based
  // on the values in the user entity.
  foreach (['last', 'first'] as $name_type) {
    $field_name = 'field_name_' . $name_type;
    if (empty($form[$field_name]['widget'][0]['value']['#default_value'])) {
      $form[$field_name]['widget'][0]['value']['#default_value'] = $user->get($field_name)->value;
    }
  }
  $author_address = $user->get('field_address')->getValue();
  foreach (
    [
      'country_code',
      'administrative_area',
      'locality',
      'postal_code',
    ] as $addr_field)
  {
    if (empty($form['field_address']['widget'][0]['address']['#default_value'][$addr_field])) {
      $form['field_address']['widget'][0]['address']['#default_value'][$addr_field] = $author_address[0][$addr_field];
    }
  }
  $user_data = \Drupal::service('user.data');
  $user_contact = $user_data->get('contact', $user->id(), 'enabled');
  if ($user_contact) {
    $contact_info_desc = t('Since your contact tab is enabled on your user profile, site visitors will be able to send you a message via this website without being able to see your e-mail address. Only list further information here if you want it to be publicly visible.');
  }
  else {
    $contact_info_desc = t('If you enable your contact tab on your user profile, site visitors would be able to send you a message via this website without being able to see your e-mail address. Anything you put here will be publicly visible.');
  }
  $form['group_contact_info']['#description'] = $contact_info_desc;
}

/**
 * #after_build callback to hide the 'format' of any given form element.
 */
function breema_hide_format_after_build($form_element, FormStateInterface $form_state) {
  $form_element['format']['#access'] = FALSE;
  return $form_element;
}

function breema_form_media_form_alter(&$form, FormStateInterface $form_state) {
  $media = $form_state->getFormObject()->getEntity();
  if ($media->bundle() === 'file') {
    breema_file_media_form_alter($form, $form_state);
  }
}

/**
 * Alter a file media form, regardless of IEF or stand-alone.
 */
function breema_file_media_form_alter(&$form, FormStateInterface $form_state) {
  $form['name']['widget'][0]['value']['#description'] = t('The <em>Name</em> will be used as the link to download the file everywhere it appears on the site. Please choose wisely.');
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_register_form'.
 *
 * Alter the user form specifically when used as user_register.
 */
function breema_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name === 'user.register') {
    $form['actions']['submit']['#value'] = t('Apply to the Practitioner Certificate Program');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_form'.
 *
 * Use #states for conditional fields based on anatomy requirement choice.
 * Hide the 'completed' option for everyone but admins.
 * Hide various fields unless it's a new user or an admiin.
 */
function breema_form_user_form_alter(&$form, FormStateInterface $form_state) {
  if (!empty($form['field_class_attended']['widget']['add_more']['#value'])) {
    $form['field_class_attended']['widget']['add_more']['#value'] = t('Add another class');
  }
  $user = $form_state->getFormObject()->getEntity();
  $roles = $user->getRoles();
  $is_certified = (in_array('instructor', $roles) || in_array('practitioner', $roles));

  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $is_user_admin = (in_array('administrator', $current_roles) || in_array('user_administrator', $current_roles));

  $form['account']['name']['#required'] = FALSE;
  if ($user->id()) {
    $form['account']['name']['#disabled'] = TRUE;
    $form['account']['name']['#description'] = t("This value is set automatically based on 'First name' and 'Last name' below.");
  }
  else {
    $form['account']['name']['#type'] = 'hidden';
  }
  $form['#validate'][] = 'breema_user_form_validate';
  $form['#entity_builders']['breema_user_form_entity_builder'] = 'breema_user_form_entity_builder';

  $form['field_anatomy_homework_language']['#states'] = [
    'visible' => [
      ':input[name="field_anatomy_requirement"]' => ['value' => 'homework'],
    ],
  ];
  if (isset($form['field_anatomy_transcript'])) {
    // #states doesn't work on a 'details' element, so we use a 'container'.
    $form['field_anatomy_transcript'] = [
      '#type' => 'container',
      '#states' => [
        'visible' => [
          ':input[name="field_anatomy_requirement"]' => ['value' => 'transcript'],
        ],
      ],
      // Now stash the entire existing form element.
      'anatomy_transcript' => $form['field_anatomy_transcript'],
      // Propagate the #weight to retain the right ordering.
      '#weight' => $form['field_anatomy_transcript']['#weight'],
    ];
  }

  if (!empty($form['field_directory_entry']['widget']['entities'][0]['#entity'])) {
    $entity = $form['field_directory_entry']['widget']['entities'][0]['#entity'];
    if (!$entity->isPublished()) {
      $form['field_directory_entry']['widget']['entities']['#prefix'] = '<div class="messages messages--warning">' . _breema_get_directory_entry_warning('ief', $entity) .  '</div>';
    }
  }

  // If the current user is an admin, return now.
  if ($is_user_admin) {
    return;
  }

  // For regular (non-admin) users, clear out the field_overrides and only hide
  // the name + organization fields. Require the full (default) requirements on
  // all actual address fields, based on the country.
  $form['field_address']['widget'][0]['address']['#field_overrides'] = [
    'givenName' => 'hidden',
    'additionalName' => 'hidden',
    'familyName' => 'hidden',
    'organization' => 'hidden',
  ];

  // Hide the 'Group memberships' widget for non-admins.
  $form['group_content']['#access'] = FALSE;

  // Once certified, hide all the requirement-related fields.
  if ($is_certified) {
    $fields = [
      'field_anatomy_requirement',
      'field_anatomy_transcript',
      'field_anatomy_homework_language',
      'field_class_other',
      'field_class_attended',
    ];
    foreach ($fields as $field) {
      $form[$field]['#access'] = FALSE;
    }
  }
  // Otherwise, don't let students set themselves to 'complete'.
  else {
    unset($form['field_anatomy_requirement']['widget']['#options']['complete']);
    // Also, hide the directory_entry field for everyone not certified.
    $form['field_directory_entry']['#access'] = FALSE;
  }
}

/**
 * Updates the user entity to reflect any change to the form name fields.
 *
 * This allows entity validation to properly check the username during form
 * validation.
 *
 * @param string $entity_type_id
 *   The entity type identifier.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity updated with the submitted values.
 * @param array $form
 *   The complete form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function breema_user_form_entity_builder($entity_type_id, EntityInterface $entity, array $form, FormStateInterface $form_state) {
  $first_name = $form_state->getValue('field_name_first');
  $last_name = $form_state->getValue('field_name_last');
  $name = trim($first_name[0]['value']) . ' ' . trim($last_name[0]['value']);
  $entity->set('name', $name);
}

/**
 * Implements hook_validation_constraint_alter().
 *
 * Override core NotNull constraint to allow entities that use Auto Entity
 * Labels to validate when their label is empty before being set automatically.
 */
function breema_validation_constraint_alter(array &$definitions) {
  $definitions['UserName']['class'] = 'Drupal\breema\Plugin\Validation\Constraint\BreemaUserNameConstraint';
}

/**
 * Additional validate handler for user_form().
 */
function breema_user_form_validate($form, FormStateInterface $form_state) {
  $user_entity = $form_state->getFormObject()->getEntity();
  $values = $form_state->getValues();
  $first_name = trim($values['field_name_first'][0]['value']);
  $last_name = trim($values['field_name_last'][0]['value']);
  $user_name = $first_name . ' ' . $last_name;
  $name_in_use = (bool) \Drupal::entityQuery('user')
    ->condition('uid', (int)$user_entity->id(), '<>')
    ->condition('name', $user_name, '=')
    ->range(0, 1)
    ->count()
    ->execute();
  if ($name_in_use) {
    $form_state->setErrorByName('field_name_first', t('Sorry, this name is already taken. Please add a middle initial to your first name.'));
  }
  $form_state->setValueForElement(['#parents' => ['name']], $user_name);
  // Force the first/last names to the trimmed copies.
  $form_state->setValueForElement(['#parents' => ['field_name_first', 0, 'value']], $first_name);
  $form_state->setValueForElement(['#parents' => ['field_name_last', 0, 'value']], $last_name);

  // Custom validation for the 'Legacy directory URL' field.
  if (!empty($values['field_legacy_directory_url'][0]['value'])) {
    $legacy_directory_url = trim($values['field_legacy_directory_url'][0]['value']);
  }
  if (!empty($legacy_directory_url)) {
    if (strpos($legacy_directory_url, 'index.php') !== FALSE) {
      $form_state->setErrorByName('field_legacy_directory_url', t('Do not include the @index_php part of the URL.', ['@index_php' => 'index.php']));
    }
    if (strpos($legacy_directory_url, '/') !== 0) {
      $form_state->setErrorByName('field_legacy_directory_url', t('Legacy directory URL must begin with a slash (/).'));
    }
    $legacy_url_in_use = \Drupal::entityQuery('user')
      ->condition('uid', (int)$user_entity->id(), '<>')
      ->condition('field_legacy_directory_url', $legacy_directory_url, '=')
      ->range(0, 1)
      ->execute();
    if (!empty($legacy_url_in_use)) {
      $uid = array_pop($legacy_url_in_use);
      $account = User::load($uid);
      $placeholders = [
        '%current_user' => $user_name,
        '%user_name' => $account->label(),
        ':edit_url' => $account->toUrl('edit-form', ['fragment' => 'edit-group-public-info'])->toString(),
      ];
      $form_state->setErrorByName('field_legacy_directory_url', t('This legacy URL is already in use by %user_name. Something is wrong. Either you have the wrong value for %current_user or you should <a href=":edit_url" target="_blank">edit %user_name</a> and fix their value.', $placeholders));
    }
    // Force the trimmed version back into the form so we save a clean value.
    $form_state->setValueForElement(['#parents' => ['field_legacy_directory_url', 0, 'value']], $legacy_directory_url);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'views_exposed_form'.
 *
 * Sets more sane sizes for the various text field exposed filters.
 */
function breema_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  $filter_sizes = [
    'postal_code' => 10,
    'telephone' => 15,
    'email' => 20,
    'city' => 20,
    'job_title' => 20,
    'search' => 20,
  ];
  foreach ($filter_sizes as $key => $size) {
    if (!empty($form[$key])) {
      $form[$key]['#size'] = $size;
    }
  }

  // Completely hide the boundary filters so they don't flicker on JS loading.
  if (!empty($form['boundary_wrapper'])) {
    foreach (Element::children($form['boundary_wrapper']['boundary']) as $key) {
      $form['boundary_wrapper']['boundary'][$key]['#type'] = 'hidden';
    }
    $form['boundary_wrapper']['#type'] = 'container';
    $form['boundary_wrapper']['#title'] = '';
  }

  if (!empty($form['country'])) {
    $breema_countries = \Drupal::state()->get('breema.breema_countries', []);
    if (empty($breema_countries)) {
      $query = \Drupal::database()->select('node__field_address', 'nfa');
      $query->addField('nfa', 'field_address_country_code');
      $query->distinct();
      $results = array_filter($query->execute()->fetchCol());
      $breema_countries = array_combine($results, $results);
      \Drupal::state()->set('breema.breema_countries', $breema_countries);
    }

    $country_list = array_keys($form['country']['#options']);
    foreach ($country_list as $country) {
      if ($country != 'All' && empty($breema_countries[$country])) {
        unset($form['country']['#options'][$country]);
      }
    }
  }

  $view = $form_state->getStorage('view');
  switch ($view['view']->id()) {
    case 'media':
    case 'breema_media_browser':
    case 'breema_media_browser_private':
      $bundle_fields = [
        'file_type' => 'file',
        'image_type' => 'image',
        'aspect_ratio' => 'image',
        'video_type' => 'video',
      ];
      foreach ($bundle_fields as $field_element => $bundle) {
        if (!empty($form['type']) && !empty($form[$field_element])) {
          $form[$field_element]['#states'] = [
            'visible' => [
              ':input[name="type"]' => ['value' => $bundle],
            ],
          ];
        }
      }
      if (!empty($form['langcode'])) {
        $form['langcode']['#access'] = FALSE;
      }
      break;

    case 'breema_directory':
      $form['type']['#options'] = [
        'event' => t('Event'),
        'directory_entry' => t('Person'),
      ];
      $form['certification']['#options'] = [
        'practitioner' => t('Breema Practitioner'),
        'inst-self-breema' => t('Self-Breema Instructor'),
        'inst-breema' => t('Breema Instructor'),
      ];
      break;

    case 'breema_event_browser':
      $form['search']['#size'] = 30;
      break;

    case 'breema_event_search':
      // Convert the exposed sorts into hidden form values.
      $form['sort_by'] = [
        '#type' => 'value',
        '#value' => 'field_date_time_value',
      ];
      $form['sort_order'] = [
        '#type' => 'value',
        // By default, we'll see 'Upcoming', so we want ascending.
        '#value' => 'ASC',
      ];
      // Add a custom #element_validate callback to set the value.
      $form['sort_order']['#element_validate'][] = 'breema_validate_event_sort_order_element';
      break;

  }
}

/**
 * Sets the 'sort_order' form value on the /events page based on 'datetime_end'.
 *
 * @param array $element
 *   The form element to validate.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function breema_validate_event_sort_order_element(array $element, FormStateInterface &$form_state) {
  $datetime_end = $form_state->getValue('datetime_end');
  // Upcoming is '1', where we want ASC. Otherwise, DESC.
  $order = $datetime_end === '1' ? 'ASC' : 'DESC';
  $form_state->setValue($element['#parents'], $order);
}

/**
 * Implements hook_form_FORM_ID_alter() for views_form_user_admin_people_page_1.
 *
 * Re-orders the list of actions for the user_bulk_form on /admin/people view.
 */
function breema_form_views_form_user_admin_people_page_1_alter(&$form, FormStateInterface $form_state) {
  $form['header']['user_bulk_form']['action']['#options'] = [
    'user_unblock_user_action' => t('Activate the selected user(s)'),
    'user_block_user_action' => t('Block the selected user(s)'),
    'user_cancel_user_action' => t('Cancel the selected user account(s)'),
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for views_form_content_page_1.
 *
 * Sets the default action to something useful: 'Save content'.
 */
function breema_form_views_form_content_page_1_alter(&$form, FormStateInterface $form_state) {
  $form['header']['node_bulk_form']['action']['#default_value'] = 'node_save_action';
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_login_form'.
 *
 * Remove unneeded #description text and fix #title for 'name' element.
 */
function breema_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['name']['#title'] = t('Full name or e-mail address');
  $form['name']['#description'] = '';
  $form['pass']['#description'] = '';
}

/**
 * Implements hook_form_FORM_ID_alter() for 'search_form'.
 *
 * Add custom description text to point users to event search + int'l directory.
 */
function breema_form_search_form_alter(&$form, FormStateInterface $form_state) {
  $placeholders = [
    ':event_search_url' => Url::fromRoute('view.breema_event_search.page_1')->toString(),
    ':directory_url' => Url::fromRoute('view.breema_directory.page_list')->toString(),
  ];
  $form['description'] = [
    '#markup' => t('To search for events, additional filters are available at the <a href=":event_search_url">Event search</a> page. To find Breema instructors and practitioners, see the <a href=":directory_url">International Directory</a>.', $placeholders),
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
  ];
  $weights = [
    'basic' => -10,
    'description' => -5,
    'help_link' => 0,
    'advanced' => 5,
  ];
  foreach ($weights as $key => $weight) {
    $form[$key]['#weight'] = $weight;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_pass' form.
 *
 * Fix #title for 'name' element to mention 'Full name' not 'Username'.
 */
function breema_form_user_pass_alter(&$form, FormStateInterface $form_state) {
  $form['name']['#title'] = t('Full name or e-mail address');
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter for entity_browser widgets.
 *
 * Hide the #prefix that includes the annoying 'You can select up to 1 media
 * items (0 left).' message we don't want to see.
 *
 * @see https://www.drupal.org/project/entity_browser/releases/8.x-2.3
 * @see https://www.drupal.org/node/2877751
 */
function breema_field_widget_entity_browser_entity_reference_form_alter(&$element, FormStateInterface $form_state, $context) {
  unset($element['current']['#prefix']);
}

/**
 * Implements hook_entity_type_alter().
 */
function breema_entity_type_alter(array &$entity_types) {
  $entity_types['node']->setLinkTemplate('clone-form', '/node/{node}/clone');
  $entity_types['node']->setLinkTemplate('add-schedule-form', '/node/{node}/add-schedule');
}

/**
 * Implements hook_entity_operation().
 */
function breema_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'event') {
    $operations['clone_form'] = [
      'title' => t('Clone'),
      'url' => $entity->toUrl('clone-form'),
      'weight' => 50,
    ];
    if (empty($entity->get('field_parent_event')->getValue())) {
      $operations['add_schedule_form'] = [
        'title' => t('Add schedule'),
        'url' => $entity->toUrl('add-schedule-form'),
        'weight' => 40,
      ];
    }
  }
  return $operations;
}

/**
 * Implements hook_ENTITY_TYPE_presave() for Media entities.
 *
 * Sets field_aspect_ratio for image media entities.
 *
 * @param Drupal\media\Entity\Media $media
 *   The Media entity about to be saved.
 */
function breema_media_presave(Media $media) {
  if ($media->bundle() === 'image') {
    $image_values = $media->get('field_media_image')->getValue();
    $width = (float)$image_values[0]['width'];
    $height = (float)$image_values[0]['height'];
    $media->set('field_aspect_ratio', round(($width/$height), 1));
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() as hook_node_insert().
 */
function breema_node_insert(NodeInterface $node) {
  breema_node_cud($node, 'insert');
}

/**
 * Implements hook_ENTITY_TYPE_update() as hook_node_update().
 */
function breema_node_update(NodeInterface $node) {
  breema_node_cud($node, 'update');
}

/**
 * Implements hook_ENTITY_TYPE_delete() as hook_node_delete().
 */
function breema_node_delete(NodeInterface $node) {
  breema_node_cud($node, 'delete');
}

/**
 * Shared code invoked on any node CUD (Create, Update, Delete) operation.
 *
 * Invokes bundle-specific helper functions.
 */
function breema_node_cud(NodeInterface $node, $operation) {
  switch ($node->bundle()) {
    case 'directory_entry':
      breema_node_cud__directory_entry($node, $operation);
      break;

    case 'event':
      breema_node_cud__event($node, $operation);
      break;

    case 'place':
      breema_node_cud__place($node, $operation);
      break;

    case 'session_resume':
      breema_node_cud__session_resume($node, $operation);
      break;

  }
}

/**
 * Callback invoked for any directory_entry node CUD operation.
 *
 * Clears the list of Breema countries when touching any directory entry.
 *
 * Also keeps field_directory_entry (on the user entity) consistent for the
 * owner of any directory entry node.
 */
function breema_node_cud__directory_entry(NodeInterface $node, $operation) {
  \Drupal::state()->delete('breema.breema_countries');
  $uid = $node->getOwnerId();
  $account = User::load($uid);
  if (!empty($account)) {
    $account->set('field_directory_entry', $operation == 'delete' ? NULL : $node->id());
    $account->save();
  }
}

/**
 * Callback invoked for any event node CUD (Create, Update, Delete) operation.
 *
 * Retest (and if needed, update) field_has_active_event and
 * field_upcoming_events on all place and directory entry nodes.
 *
 * Ensure that the location is added to 'My places' for all instructors.
 */
function breema_node_cud__event(NodeInterface $node, $operation) {
  $event_mgr = new BreemaEventMgr();
  $event_mgr->update();

  $instructors = $node->get('field_instructors')->getValue();
  if ($operation != 'delete' && !empty($instructors)) {
    $places = $node->get('field_location')->referencedEntities();
    if (!empty($places)) {
      $place = array_pop($places);
      foreach ($instructors as $instructor) {
        breema_ensure_flag('my_places', $place, $instructor['target_id']);
      }
    }
  }

  $new_tc = $node->get('field_transfer_credit')->value;
  $bc_sponsored = $node->get('field_breema_center_sponsored')->value;
  $location = $node->get('field_location')->getValue();
  $at_bc = !empty($location) && $location[0]['target_id'] == 2;
  $bc_sponsored = $bc_sponsored || $at_bc;
  if (empty($bc_sponsored) && !empty($new_tc)) {
    $admin_all = Url::fromUri('internal:/admin/content/breema-events-xfer', ['absolute' => TRUE]);
    $footer = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#items' => [
        t('This event: @url', ['@url' => $node->toUrl('canonical', ['absolute' => TRUE])->toString()]),
        t('Administer all events with transfer credit: @url', ['@url' => $admin_all->toString()]),
      ],
    ];
  }

  switch ($operation) {
    case 'insert':
      if (empty($bc_sponsored) && !empty($new_tc)) {
        \Drupal::service('breema.entity_sender')->sendEntity($node, 'event_xfer_insert', BREEMA_EVENT_TRANSFER_CREDIT_EMAIL, [], $footer);
      }
      break;

    case 'update':
      $old_tc = $node->original->get('field_transfer_credit')->value;
      if (empty($bc_sponsored) && !empty($new_tc) && $old_tc !== $new_tc) {
        \Drupal::service('breema.entity_sender')->sendEntity($node, 'event_xfer_update', BREEMA_EVENT_TRANSFER_CREDIT_EMAIL, [], $footer);
      }
      break;

  }

}

/**
 * Callback invoked for any place node CUD (Create, Update, Delete) operation.
 *
 * Ensure that the location is added to 'My places' for the owner.
 *
 * Update the address and geolocation on any event nodes pointing to this place
 * that don't match the current value.
 */
function breema_node_cud__place(NodeInterface $node, $operation) {
  if ($operation != 'delete') {
    breema_ensure_flag('my_places', $node, $node->getOwnerId());
  }

  $query = \Drupal::entityQuery('node');
  $query
    ->condition('type', 'event')
    ->condition('field_location', $node->id());
  $results = $query->execute();
  if (!empty($results)) {
    $events = Node::loadMultiple($results);
  }
  $address = $operation == 'delete' ? [] : $node->get('field_address')->getValue();
  $geolocation = $operation == 'delete' ? [] : $node->get('field_geolocation')->getValue();
  if (!empty($events)) {
    foreach ($events as $event) {
      $cur_address = $event->get('field_address')->getValue();
      $cur_geolocation = $event->get('field_geolocation')->getValue();
      if ($address != $cur_address || $geolocation != $cur_geolocation) {
        $event->set('field_address', $address);
        $event->set('field_geolocation', $geolocation);
        $event->save();
      }
    }
  }
}

/**
 * Callback invoked for any session resume node CUD operation.
 *
 * Send an e-mail when new resumes are created.
 */
function breema_node_cud__session_resume(NodeInterface $node, $operation) {
  if ($operation === 'insert') {
    $admin_all = Url::fromUri('internal:/admin/content/breema-session-resume', ['absolute' => TRUE]);
    $user_resumes_url = Url::fromRoute('entity.user.breema_resume_dashboard', ['user' => $node->getOwnerId()], ['absolute' => TRUE]);
    $footer = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#items' => [
        t('This session resume: @url', ['@url' => $node->toUrl('canonical', ['absolute' => TRUE])->toString()]),
        t('All session resumes for this user: @url', ['@url' => $user_resumes_url->toString()]),
        t('Administer all session resumes: @url', ['@url' => $admin_all->toString()]),
      ],
    ];
    \Drupal::service('breema.entity_sender')->sendEntity($node, 'session_resume_insert', BREEMA_SESSION_RESUME_EMAIL, [], $footer);
  }
}

/**
 * Ensure that the given user has flagged the given node with the given flag.
 */
function breema_ensure_flag($flag_id, NodeInterface $node, $uid) {
  static $existing_flag_uids = [];
  $flag = \Drupal::service('flag')->getFlagById($flag_id);
  if (empty($existing_flag_uids[$node->id()])) {
    $flaggings = \Drupal::service('flag')->getEntityFlaggings($flag, $node);
    foreach ($flaggings as $flagging) {
      $existing_flag_uids[$node->id()][$flagging->getOwnerId()] = TRUE;
    }
  }
  if (empty($existing_flag_uids[$node->id()][$uid])) {
    $values = [
      'flag_id' => $flag_id,
      'entity_type' => 'node',
      'entity_id' => $node->id(),
      'flagged_entity' => $node->id(),
      'uid' => $uid
    ];
    $flagging = \Drupal::service('entity_type.manager')->getStorage('flagging')->create($values);
    $flagging->save();
    $existing_flag_uids[$node->id()][$uid] = TRUE;
  }
}

/**
 * Implements hook_mail().
 */
function breema_mail($key, &$message, $params) {
  // For now, all of our email is HTML. Make sure the headers are right.
  $message['headers']['Content-Type'] = 'text/html; charset=utf-8';
  $message['from'] = \Drupal::config('system.site')->get('mail');
  $message['body'][] = $params['body'];

  $options = [
    'langcode' => $message['langcode'],
  ];
  $placeholders = ['@label' => $params['entity']->label()];

  switch ($key) {
    case 'session_resume_insert':
      $message['subject'] = t('New: @label', $placeholders, $options);
      break;

    case 'event_xfer_update':
    case 'event_xfer_insert':
      $message['subject'] = $key === 'event_xfer_update' ? t('Updated event now with transfer credit: @label', $placeholders, $options) : t('New event with transfer credit: @label', $placeholders, $options);
      break;

    case 'user_applied':
      $message['subject'] = t('New user applied for certificate program: @label', $placeholders, $options);
      break;

  }
}

/**
 * Implements hook_shortcut_default_set().
 *
 * @todo Core sucks. This is sometimes an AccountProxy, others a User. :(
 *
 * @param $account
 *   The user account whose default shortcut set is being requested.
 * @return string
 *   The name of the shortcut set for this user.
 */
function breema_shortcut_default_set($account) {
  $roles = $account->getRoles(TRUE);
  // Keys are role IDs, values are shortcut set machine names, ordered by
  // the most elevated roles first.
  $role_shortcut_map = [
    'administrator' => 'administrator',
    'user_administrator' => 'user-administrator',
    'content_administrator' => 'content-administrator',
    'content_editor' => 'content-administrator',
    'event_administrator' => 'event-administrator',
    'instructor' => 'instructor',
    'practitioner' => 'practitioner',
    'student' => 'student',
  ];
  foreach ($role_shortcut_map as $role_id => $shortcut_set) {
    if (in_array($role_id, $roles)) {
      return $shortcut_set;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for User entities.
 *
 * If field_certification_level changes, update everything that matters:
 *   - field_certification
 *   - role
 */
function breema_user_presave(UserInterface $user) {
  $old_level = empty($user->original) ? 'new-user' : $user->original->get('field_certification_level')->value;
  $new_level = $user->get('field_certification_level')->value;

  if ($old_level === $new_level) {
    return;
  }

  switch ($new_level) {
    case 'none':
      $user->removeRole('student');
      $user->removeRole('practitioner');
      $user->removeRole('instructor');
      $user->set('field_certification', []);
      break;

    case 'student':
      $user->addRole('student');
      $user->removeRole('practitioner');
      $user->removeRole('instructor');
      $user->set('field_certification', []);
      break;

    case 'practitioner':
      $user->removeRole('student');
      $user->addRole('practitioner');
      $user->removeRole('instructor');
      $user->set('field_certification', ['practitioner']);
      break;

    // For now, no difference in site behavior for provisional vs. full.
    case 'prov-self-breema':
    case 'self-breema':
      $user->removeRole('student');
      $user->addRole('practitioner');
      $user->addRole('instructor');
      $user->set('field_certification', ['practitioner', 'inst-self-breema']);
      break;

    // For now, no difference in site behavior for provisional vs. full.
    case 'prov-instructor':
    case 'instructor':
      $user->set(
        'field_certification',
        ['practitioner', 'inst-self-breema', 'inst-breema']
      );
      $user->removeRole('student');
      $user->addRole('practitioner');
      $user->addRole('instructor');
      break;

  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for User entities.
 */
function breema_user_insert(UserInterface $user) {
  $new_level = $user->get('field_certification_level')->value;
  _breema_user_update_groups($user, $new_level);

  // If the user is blocked (applied for an account, not created by admin),
  // notify the practitioner-liason(s) about it.
  if (empty($user->get('status')->value)) {
    // To be able to access/view the user, we have to switch to an admin user
    // while generating the e-mail body.
    $admin_user = User::load(1);
    $account_switcher = \Drupal::service('account_switcher');
    $account_switcher->switchTo($admin_user);
    $header = [
      '#markup' => '<p>' . t('@name applied for the Breema Practitioner Certificate Program.', ['@name' => $user->label()]) . '</p>'
      . '<p>' . t('View profile: @url', ['@url' => $user->toUrl('canonical', ['absolute' => TRUE])->toString()]) . '</p>'
      . '<p class="email">E-mail: ' . $user->get('mail')->value . '</p>',
    ];

    $admin_all = Url::fromUri('internal:/admin/people', ['absolute' => TRUE]);
    $footer = [
      '#markup' => '<p>' . t('Administer all accounts: @url', ['@url' => $admin_all->toString()]) . '</p>',
    ];

    \Drupal::service('breema.entity_sender')->sendEntity($user, 'user_applied', BREEMA_NEW_USER_EMAIL, $header, $footer);
    $account_switcher->switchBack();
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for User entities.
 *
 * If field_certification_level changed, update group memberships.
 */
function breema_user_update(UserInterface $user) {
  $nodes = $user->get('field_directory_entry')->referencedEntities();
  $directory_entry = !empty($nodes) ? array_pop($nodes) : NULL;

  $old_level = $user->original->get('field_certification_level')->value;
  $new_level = $user->get('field_certification_level')->value;
  if ($old_level !== $new_level) {
    _breema_user_update_groups($user, $new_level);

    // If the user has a directory entry, re-save it to (potentially) update the
    // certifications listed there, too.
    if (!empty($directory_entry)) {
      $directory_entry->setNewRevision();
      // Record what user updated field_certification_level.
      $directory_entry->setRevisionAuthorId(\Drupal::currentUser()->id());
      // This should always be English, don't use t().
      $directory_entry->revision_log = 'Changing certification level';
      $directory_entry->save();
    }
  }
  // Regardless of if the user has a directory entry, any time a user is
  // updated, we want to make sure if there's a value for the legacy directory
  // URL that we have a good redirect for it. Note that if a user edits their
  // directory entry directly, that'll trigger a user update, too. We use
  // drupal_register_shutdown_function() to ensure everything is committed to
  // the DB before we do our magic.
  drupal_register_shutdown_function('breema_user_ensure_legacy_directory_redirect', $user, $directory_entry);
}

/**
 * Update group memberships if field_certification_level changes.
 *
 * @param \Drupal\user\UserInterface $user
 *   The user to set group membership on.
 * @param string $certification_level
 *   The value of field_certification_level the user now has.
 *
 * @todo Would be nice to use constants for group ids, not hard-code ints.
 * @internal
 */
function _breema_user_update_groups(UserInterface $user, $certification_level) {
  switch ($certification_level) {
    case 'none':
      // Remove from all private groups.
      _breema_set_user_groups($user, []);
      break;

    case 'student':
      _breema_set_user_groups($user, ['4']);
      break;

    case 'practitioner':
      _breema_set_user_groups($user, ['3']);
      break;

    // For now, no difference in site behavior for provisional vs. full.
    case 'prov-self-breema':
    case 'self-breema':
      _breema_set_user_groups($user, ['2', '3']);
      break;

    // For now, no difference in site behavior for provisional vs. full.
    case 'prov-instructor':
    case 'instructor':
      _breema_set_user_groups($user, ['1', '2', '3']);
      break;

  }
}

/**
 * Private helper function to force a set of group memberships for a user.
 *
 * @param \Drupal\user\UserInterface $user
 *   The user to set group membership on.
 * @param string[] $new_group_ids
 *   Array of group IDs the given user should belong to.
 *
 * @internal
 */
function _breema_set_user_groups(UserInterface $user, array $new_group_ids) {
  $memberships = \Drupal::service('group.membership_loader')->loadByUser($user);
  $current_group_ids = [];
  foreach ($memberships as $membership) {
    // Only consider certification groups for this.
    // @todo Should probably be more careful, but for now, certification groups
    // are IDs 1-4, so we can be lazy.
    $group_id = $membership->getGroup()->id();
    if ($group_id <= 4) {
      $current_group_ids[] = $group_id;
    }
  }

  $remove_group_ids = array_diff($current_group_ids, $new_group_ids);
  $add_group_ids = array_diff($new_group_ids, $current_group_ids);

  if (!empty($remove_group_ids)) {
    foreach ($memberships as $membership) {
      if (in_array($membership->getGroup()->id(), $remove_group_ids)) {
        $membership->getGroupContent()->delete();
      }
    }
  }

  if (!empty($add_group_ids)) {
    foreach (Group::loadMultiple($add_group_ids) as $group) {
      $group->addMember($user);
      $group->save();
    }
  }

}

/**
 * Ensures if a user has a field_legacy_directory_url that we redirect it.
 *
 * If the user has a directory entry, we redirect there. Otherwise, we redirect
 * to the 'International Directory' list page.
 *
 * @param \Drupal\user\UserInterface $user
 *   The user to check the legacy redirect on.
 * @param \Drupal\node\NodeInterface|NULL $node
 *   The user's directory entry node, or NULL if none.
 */
function breema_user_ensure_legacy_directory_redirect($user, $directory_entry) {
  $legacy_url = $user->get('field_legacy_directory_url')->value;
  if (empty($legacy_url)) {
    return;
  }
  $nid = !empty($directory_entry) ? $directory_entry->id() : 0;
  $redirect_repo = \Drupal::service('redirect.repository');
  $legacy_redirect = $redirect_repo->findMatchingRedirect($legacy_url);

  // If we already have a redirect for the legacy URL, make sure it's right.
  if (!empty($legacy_redirect)) {
    $legacy_redirect_target = $legacy_redirect->getRedirect();
    // If we have a directory entry, make sure it matches.
    if (!empty($nid)) {
      if ($legacy_redirect_target['uri'] === "internal:/node/$nid") {
        // Legacy redirect already points to the directory entry, done.
        return;
      }
      else {
        // Legacy redirect points somewhere else, update it.
        $legacy_redirect->setRedirect("/node/$nid");
        $legacy_redirect->save();
      }
    }
    // If there's no directory entry, make sure redirect points to /directory.
    elseif ($legacy_redirect_target['uri'] !== 'internal:/directory') {
      // Wherever that redirect is pointing is now wrong, update.
      $legacy_redirect->setRedirect("/directory");
      $legacy_redirect->save();
    }
  }
  // No existing redirect with the legacy URL, make one.
  else {
    $redirect = Redirect::create();
    $redirect->setSource($legacy_url);
    $redirect->setLanguage(Language::LANGCODE_NOT_SPECIFIED);
    $redirect->setStatusCode(301);
    // If there's a directory entry for this user, redirect there.
    if (!empty($nid)) {
      $redirect->setRedirect("/node/$nid");
    }
    // Otherwise, use the global /directory listing.
    else {
      $redirect->setRedirect("/directory");
    }
    $redirect->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 *
 * Denormalize the address and geolocation from the place into the event.
 * On schedule (child) events, set title based on subtitle and parent title.
 * On place nodes, if the TZ is blank, try to find it from the geolocation.
 */
function breema_node_presave(NodeInterface $node) {
  if ($node->bundle() == 'event') {
    $places = $node->get('field_location')->referencedEntities();
    if (!empty($places)) {
      $place = array_pop($places);
      $address = $place->get('field_address')->getValue();
      $geolocation = $place->get('field_geolocation')->getValue();
      $node->set('field_address', $address);
      $node->set('field_geolocation', $geolocation);
      $node->set('field_timezone', $place->get('field_timezone')->getValue());
      // If it's the Breema Center, force 'Breema Center sponsored' to FALSE.
      // It's confusing and clutter to have this set to TRUE on all BC events.
      // All the code and views that care already check for @ BC separately.
      if ($place->id() == 2) {
        $node->set('field_breema_center_sponsored', FALSE);
      }
    }

    $parent_value = $node->get('field_parent_event')->getValue();
    if (!empty($parent_value)) {
      $parent_events = $node->get('field_parent_event')->referencedEntities();
      $parent_event = array_pop($parent_events);
      if (!empty($parent_event)) {
        $title = $node->get('field_subtitle')->value . ' - ' . $parent_event->label();
        $node->setTitle($title);
      }
    }
  }
  elseif ($node->bundle() == 'directory_entry') {
    $authors = $node->get('uid')->referencedEntities();
    if (!empty($authors)) {
      $author_entity = array_pop($authors);
      $author_fields = [
        'field_certification',
        'field_breema_center_staff',
        'field_breema_clinic_practitioner',
      ];
      foreach ($author_fields as $field) {
        $value = $author_entity->get($field)->getValue();
        $node->set($field, $value);
      }
    }
  }
  elseif ($node->bundle() == 'place') {
    if (empty($node->get('field_timezone')->value)) {
      $geolocation = $node->get('field_geolocation')->getValue();
      if (!empty($geolocation[0]['lat'])) {
        $location = [
          'latitude' => $geolocation[0]['lat'],
          'longitude' => $geolocation[0]['lng'],
        ];
      }
      else {
        $address = $node->get('field_address')->getValue();
        $location = [
          'countryCode' => $address[0]['country_code'],
          // @todo: Handle the region correctly for non-US countries.
          'region' => $geolocation[0]['administrative_area'],
        ];
      }
      $geotz = geotimezone_query($location, 'identifier');
      if (!empty($geotz)) {
        $node->set('field_timezone', $geotz);
      }
    }
  }
}

/**
 * Implements hook_entity_create_access().
 */
function breema_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $user = User::load($account->id());
  if (!$user->hasRole('content_administrator')
      && $context['entity_type_id'] == 'node'
      && $entity_bundle == 'directory_entry')
  {
    // Deny creation if this user already owns a directory entry node.
    $directory_entry = $user->get('field_directory_entry')->getValue();
    if (!empty($directory_entry)) {
      return AccessResult::forbidden($user->label() . ' already has a directory entry.');
    }
  }
  return AccessResult::neutral();
}

/**
 * Creates a merged title with the main title and optional subtitle.
 */
function breema_merge_titles(NodeInterface $node) {
  $merged_title = '';
  if ($node->hasField('field_title_main')) {
    $main_title = $node->get('field_title_main')->getValue();
    $merged_title = $main_title[0]['value'];
    if ($node->hasField('field_title_sub')) {
      $subtitle = $node->get('field_title_sub')->getValue();
      if (!empty($subtitle)) {
        $merged_title .= ': ' . $subtitle[0]['value'];
      }
    }
  }
  return $merged_title;
}

/**
 * Generate a render array of action links for a directory entry.
 *
 * @param \Drupal\node\Entity\NodeInterface $directory_entry
 *   The fully-loaded directory entry node entity, or NULL if there is none.
 * @param boolean $include_create_link
 *   Should the action links contain a link to create an entry (if appropriate)?
 * @return array
 *   Appropriate render array for the current user and given directory entry.
 */
function _breema_get_directory_entry_action_links(NodeInterface $directory_entry = NULL, $include_create_link = FALSE) {
  $url_options['query']['destination'] = \Drupal::destination()->get();

  // If there's no entry and we don't want create links, bail now.
  if (empty($directory_entry) && !$include_create_link) {
    return [];
  }

  // If there's no entry, and the user has permission, add links to create one.
  if (empty($directory_entry)) {
    $current_user = \Drupal::currentUser();
    $node_type = NodeType::load('directory_entry');
    $result = \Drupal::service('access_check.node.add')->access($current_user, $node_type);
    if ($result) {
      $directory_url = Url::fromUri('base:/directory');
      $add_entry_url = Url::fromRoute('node.add', ['node_type' => 'directory_entry'], $url_options);
      return [
        'note' => [
          '#prefix' => '<p>',
          '#markup' => t('You do not have an entry in the <a href=":breema-directory">International Breema directory</a>.', [':breema-directory' => $directory_url->toString()]),
          '#suffix' => '</p>',
        ],
        'add-link' => [
          '#prefix' => '<div class="action action--primary">',
          '#markup' => t('<a href=":create-directory-entry" target="_blank">Create entry</a>', [':create-directory-entry' => $add_entry_url->toString()]),
          '#suffix' => '</div>',
        ],
      ];
    }
  }

  // Otherwise, generate whatever links the user has permission to use.
  $links = [];
  if ($directory_entry->access('update')) {
    $edit_url = Url::fromRoute('entity.node.edit_form', ['node' => $directory_entry->id()], $url_options);
    $links['edit-link'] = [
      '#prefix' => '<div class="action action--secondary">',
      '#markup' => t('<a href=":edit" target="_blank">Edit</a>', [':edit' => $edit_url->toString()]),
      '#suffix' => '</div>',
    ];
  }
  if ($directory_entry->access('delete')) {
    $delete_url = Url::fromRoute('entity.node.delete_form', ['node' => $directory_entry->id()], $url_options);
    $links['delete-link'] = [
      // For reasons that aren't yet clear, #prefix and #suffix aren't
      // working for this, so we directly stuff those into #markup.
      '#markup' => '<div class="danger">' . t('<a href=":delete" class="danger" target="_blank">Delete</a>', [':delete' => $delete_url->toString()]) . '</div>',
    ];
  }
  return $links;
}

/**
 * Implements hook_entity_view_alter().
 */
function breema_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  switch ($entity->getEntityTypeId()) {
    case 'group':
      return breema_entity_group_view_alter($build, $entity, $display);
      break;

    case 'user':
      return breema_entity_user_view_alter($build, $entity, $display);
      break;

    case 'node':
      // Special handling for specific pages:
      if ($entity->id() == 3) {
        return breema_node_3_view_alter($build, $entity, $display);
      }
      if ($entity->id() == 36) {
        return breema_node_36_view_alter($build, $entity, $display);
      }
      if ($entity->id() == 38) {
        return breema_node_38_view_alter($build, $entity, $display);
      }
      // Otherwise, see if there's a bundle-specific method and use it.
      $bundle = $entity->bundle();
      $function = 'breema_entity_node_' . $bundle . '_view_alter';
      if (function_exists($function)) {
        return $function($build, $entity, $display);
      }
      break;

  }
}

/**
 * Callback for hook_entity_view_alter() for group entities.
 */
function breema_entity_group_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() == 'default') {
    $view = Views::getView('breema_group_content');
    $view->setDisplay('block_teasers_audio');
    $view->setArguments([$entity->id()]);
    $view->execute();
    if (count($view->result)) {
      $build['audio_teasers'] = $view->preview();
      $build['audio_teasers']['#weight'] = 10;
    }
  }
}

/**
 * Callback for hook_entity_view_alter() for user entities.
 */
function breema_entity_user_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $is_user_admin = (in_array('administrator', $current_roles) || in_array('user_administrator', $current_roles));
  if (!$is_user_admin) {
    $fields = [
      'field_anatomy_requirement',
      'field_anatomy_transcript',
      'field_anatomy_homework_language',
      'field_class_attended',
      'field_class_other',
      'field_why_interested',
    ];
    foreach ($fields as $field) {
      $build[$field]['#access'] = FALSE;
    }
  }
  // Private fields that users (admins) should see (but not touch):
  $can_see = $is_user_admin || $entity->id() == $current_user->id();
  $private_fields = [
    'member_for',
    'field_breema_center_staff',
    'field_breema_clinic_practitioner',
    'field_certification',
    'group_content',
  ];
  foreach ($private_fields as $field) {
    $build[$field]['#access'] = $can_see;
  }
  if ($display->getMode() == 'default') {
    $user_roles = $entity->getRoles();
    $is_certified = (in_array('instructor', $user_roles) || in_array('practitioner', $user_roles));
    if ($is_certified) {
      $directory_entries = $entity->get('field_directory_entry')->referencedEntities();
      $directory_entry = !empty($directory_entries) ? array_pop($directory_entries) : NULL;
      $can_create = $current_user->id() == $entity->id();
      $build['action_links'] = _breema_get_directory_entry_action_links($directory_entry, $can_create);
      $build['action_links']['#weight'] = 10;
      $build['#group_children']['action_links'] = 'group_public_directory_entry';
      if (!empty($directory_entry) && !$directory_entry->isPublished()) {
        $build['warning'] = [
          '#type' => 'markup',
          '#markup' => _breema_get_directory_entry_warning('block', $directory_entry),
          '#prefix' => '<div class="messages messages--warning">',
          '#suffix' => '</div>',
          '#weight' => '-100',
        ];
        $build['#group_children']['warning'] = 'group_public_directory_entry';
      }
      // Always put this at the top of the field group.
      $build['field_legacy_directory_url']['#weight'] = -200;
    }
    // @todo fix cache contexts/tags/etc.
  }
}

/**
 * Callback for hook_entity_view_alter() for directory entry nodes.
 */
function breema_entity_node_directory_entry_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // @todo fix cache contexts/tags/etc.
  $author = $build['#node']->get('uid')->getValue();
  if (!empty($author[0]['target_id'])) {
    $author_uid = $author[0]['target_id'];
  }
  if (!empty($author_uid)) {
    $access_manager = \Drupal::service('access_manager');
    if ($access_manager->checkNamedRoute('entity.user.contact_form', ['user' => $author_uid])) {
      $contact_url = Url::fromRoute('entity.user.contact_form', ['user' => $author_uid]);
    }
    $author_entity = User::load($author_uid);
    $user_picture = $author_entity->get('user_picture')->getValue();
  }

  if (!empty($user_picture[0]['target_id'])) {
    $user_picture_file = File::load($user_picture[0]['target_id']);
    if (!empty($user_picture_file)) {
      $build['headshot'] = [
        '#theme' => 'image_style',
        '#style_name' => $build['#view_mode'] == 'full' ? '320x320_small' : '128x128_tiny',
        '#weight' => -1,
        '#prefix' => '<div class="headshot">',
        '#suffix' => '</div>',
        '#uri' => $user_picture_file->getFileUri(),
        '#alt' => t('Profile image for @user_name', ['@user_name' => $author_entity->getAccountName()]),
      ];
      if ($build['#view_mode'] == 'teaser_compact' || $build['#view_mode'] == 'teaser_search_result') {
        $build['headshot']['#prefix'] .= '<a href="' . $entity->toUrl()->toString() . '">';
        $build['headshot']['#suffix'] = '</a></div>';
      }
    }
  }

  if (!empty($contact_url) && ($build['#view_mode'] == 'full' || $build['#view_mode'] == 'teaser_search_result')) {
    $build['contact_link'] = [
      '#weight' => 6,
      '#prefix' => '<div class="contact-form-link">',
      '#markup' => t('<a href=":contact">Send message</a>', [':contact' => $contact_url->toString()]),
      '#suffix' => '</div>',
    ];
  }

  // Inject a 'Read more' link at the end of the upcoming events list.
  if ($build['#view_mode'] == 'teaser_search_result'
      && !empty($build['field_upcoming_events']['#items'])
  ) {
    $item_count = count($build['field_upcoming_events']['#items']);
    $entity_label_stripped = strip_tags($entity->label());
    $build['field_upcoming_events'][$item_count] = [
      '#type' => 'link',
      '#title' => t('Read more<span class="visually-hidden"> about @title</span>', ['@title' => $entity_label_stripped]),
      '#url' => $entity->toUrl(),
    ];
  }

  if ($build['#view_mode'] == 'full' && !$entity->isPublished()) {
    $build['warning'] = [
      '#type' => 'markup',
      '#markup' => _breema_get_directory_entry_warning('block', $entity),
      '#prefix' => '<div class="messages messages--warning">',
      '#suffix' => '</div>',
      '#weight' => '-100',
    ];
  }

  if ($build['#view_mode'] === 'full' || $build['#view_mode'] === 'forward') {
    // Embed views specific to directory_entry nodes.
    $displays = [];
    // Don't put the map in forwarded places.
    if ($build['#view_mode'] === 'full') {
      $displays[] = 'map';
    }
    $displays[] = 'list';
    $weight = 10;
    $args = [$author_uid];
    foreach ($displays as $key) {
      $view = Views::getView('breema_events_by_instructor');
      $view->setDisplay('block_' . $key);
      $view->setArguments($args);
      $view->execute();
      $build['events_' . $key] = $view->preview();
      $build['events_' . $key]['#weight'] = $weight++;
    }
    // $view is now for the event list.
    // Only include the 'Upcoming events' header if there are results.
    if (!empty($view->result)) {
      if ($build['#view_mode'] === 'full') {
        // Add an invisible anchor above the map for #upcoming-events links.
        $build['events_map']['#prefix'] = '<h2 id="upcoming-events" class="visually-hidden">' . t('Upcoming event map') . '</h2>';
      }
      // @todo we could format_plural() here if we really wanted.
      $build['events_list']['#prefix'] = '<h2>' . t('Upcoming events') . '</h2>';
    }
    // Try to embed articles by this user.
    $view = Views::getView('breema_articles');
    $view->setDisplay('embed_by_author');
    $view->setArguments($args);
    $view->execute();
    if (!empty($view->result)) {
      $build['articles'] = [
        '#prefix' => '<h2>' . t('Articles by @user', ['@user' => $author_entity->getAccountName()]) . '</h2>',
        'articles' => $view->preview(),
        '#weight' => 100,
      ];
    }
  }
}

/**
 * Callback for hook_entity_view_alter() for article nodes.
 */
function breema_entity_node_article_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // @todo fix cache contexts/tags/etc.
  $view_mode = $display->getMode();
  $breema_authors = $entity->get('field_authors_breema')->referencedEntities();
  $other_authors = $entity->get('field_authors_other')->getValue();
  $authors = [];
  if (!empty($breema_authors)) {
    if ($view_mode === 'default' || $view_mode === 'forward') {
      $label_callback = 'breema_entity_label_instructor_directory_entry';
    }
    else {
      $label_callback = 'breema_entity_label_plain';
    }
    $authors = array_map($label_callback, $breema_authors);
  }
  if (!empty($other_authors)) {
    foreach ($other_authors as $other_author) {
      if ($view_mode === 'teaser' || $view_mode === 'teaser_compact') {
        breema_strip_links($other_author['value']);
      }
      $authors[] = $other_author['value'];
    }
  }
  if (!empty($authors)) {
    $build['authors'] = [
      '#type' => 'markup',
      '#prefix' => '<div class="byline">',
      '#markup' => t('By') . ' ' . breema_fancy_implode($authors),
      '#suffix' => '</div>',
      '#weight' => -10,
    ];
  }

  $source_info = [];
  $source_name = $entity->get('field_source_name')->value;
  if ($view_mode === 'teaser' || $view_mode === 'teaser_compact') {
    $build['field_main_image']['#weight'] = -20;
    $build['read_more'] = [
      '#prefix' => '<div class="more-link">',
      '#markup' => t('Read more<span class="visually-hidden"> about @title</span>', ['@title' => strip_tags($entity->label())]),
      '#suffix' => '</div>',
      '#weight' => 500,
    ];
    if (!empty($source_name)) {
      $source_info[] = $source_name;
    }
  }
  else {
    $source_url = $entity->get('field_source_url')->getValue();
    if (!empty($source_url[0]['uri'])) {
      if (empty($source_name)) {
        // If there is no source name, we'll have to use the raw URL.
        $source_name = $source_url[0]['uri'];
      }
      $source_info[] = '<a href="' . $source_url[0]['uri'] . '">' . $source_name . '</a>';
    }
    elseif (!empty($source_name)) {
      $source_info[] = $source_name;
    }
    $original_url = $entity->get('field_original_article_url')->getValue();
    if (!empty($original_url[0]['uri'])) {
      $source_info[] = '<span class="original-link">' . t('<a href="@url">View original article</a>', ['@url' => $original_url[0]['uri']]) . '</span>';
    }
  }
  if (!empty($build['field_date'][0]['#text'])) {
    $source_info[] = '<span class="pub-date">' . $build['field_date'][0]['#text'] . '</span>';
  }
  if (!empty($source_info)) {
    $build['source'] = [
      '#markup' => implode(' <span class="dash">&mdash;</span> ', $source_info),
      '#prefix' => '<div class="source-info">',
      '#suffix' => '</div>',
      '#weight' => -5,
    ];
    $build['field_date']['#access'] = FALSE;
  }
}

/**
 * Callback for hook_entity_view_alter() for event nodes.
 */
function breema_entity_node_event_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // We only want to do anything here on full page views. Return early if not.
  // @todo we'll want to handle this for 'forward' view mode, once we use it.
  if ($display->getMode() !== 'default') {
    return;
  }
  // Embed views specific to event nodes.
  $parent_event = $entity->get('field_parent_event')->getValue();
  if (!empty($parent_event)) {
    $build['#cache']['tags'][] = 'node:' . $parent_event[0]['target_id'];
    $args = [$parent_event[0]['target_id']];
  }
  else {
    $args = [$entity->id()];
  }
  $weight = 500;

  $view = Views::getView('breema_event_children');
  $view->setDisplay('embed_all');
  $view->setArguments($args);
  $view->execute();
  if (!empty($view->result)) {
    foreach (['list', 'calendar'] as $key) {
      $view = Views::getView('breema_event_children');
      $view->setDisplay('block_' . $key);
      $view->setArguments($args);
      $build['schedule_' . $key] = $view->preview();
      $build['schedule_' . $key]['#weight'] = $weight++;
    }
  }
  if (!empty($build['schedule_list'])) {
    $build['schedule_list']['#prefix'] = '<h2>' . t('Schedule') . '</h2>';
  }
}

/**
 * Callback for hook_entity_view_alter() for essence (of Breema) nodes.
 */
function breema_entity_node_essence_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'default' || $display->getMode() === 'forward') {
    $build['link'] = [
      '#type' => 'link',
      '#title' => t('Read more Essence of Breema'),
      '#url' => Url::fromUri('internal:/about-breema/essence'),
      '#prefix' => '<div class="action action--secondary center">',
      '#suffix' => '</div>',
      '#weight' => 100,
    ];
  }
}

/**
 * Callback for hook_entity_view_alter() for place nodes.
 */
function breema_entity_node_place_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'default' || $display->getMode() === 'forward') {
    $view = Views::getView('breema_events_by_location');
    // Use the custom display for the Breema Center so the feed attach works.
    $view->setDisplay($entity->id() == 2 ? 'block_breema_center' : 'block_1');
    $view->setArguments([$entity->id()]);
    $view->execute();
    if (!empty($view->result)) {
      $build['events'] = $view->preview();
      $build['events']['#weight'] = 100;
      $build['events']['#prefix'] = '<h2>' . t('Upcoming events') . '</h2>';
    }
  }
}

/**
 * Callback for hook_entity_view_alter() for session_resume nodes.
 */
function breema_entity_node_session_resume_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'default') {
    $owner = $entity->getOwner();
    $build['view_all'] = [
      '#type' => 'link',
      '#title' => t("View all of @user's session resumes", ['@user' => $owner->getAccountName()]),
      '#url' => Url::fromRoute('entity.user.breema_resume_dashboard', ['user' => $owner->id()]),
      '#weight' => 100,
      '#prefix' => '<div class="action action--secondary">',
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Callback for hook_entity_view_alter() for node 3 ("The Nine Principles").
 */
function breema_node_3_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'default' || $display->getMode() === 'forward') {
    $view = Views::getView('breema_nine_principles');
    $view->setDisplay('embed_1');
    $view->execute();
    $build['teasers'] = $view->preview();
    $build['field_main_image']['#weight'] = -1;
    $build['body']['#weight'] = 0;
    $build['teasers']['#weight'] = 1;
    $build['field_resources']['#weight'] = 2;
  }
}

/**
 * Callback for hook_entity_view_alter() for node 36 ("Breema Intensives").
 */
function breema_node_36_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'default' || $display->getMode() === 'forward') {
    $view = Views::getView('breema_events_intensives');
    $view->setDisplay('block_list');
    $view->execute();
    if (!empty($view->result)) {
      $build['event_list'] = $view->preview();
      $build['event_list']['#prefix'] = '<h2>' . t('Upcoming Intensives') . '</h2>';
      $build['event_list']['#weight'] = 100;
    }
  }
}

/**
 * Callback for hook_entity_view_alter() for node 38 ("Events at the Center").
 */
function breema_node_38_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'default' || $display->getMode() === 'forward') {
    $view = Views::getView('breema_events_by_location');
    $view->setDisplay('block_breema_center');
    $view->execute();
    if (!empty($view->result)) {
      $build['event_list'] = $view->preview();
      $build['event_list']['#weight'] = 100;
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Retest (and if needed, update) field_has_active_event and
 * field_upcoming_events on all place and directory entry nodes.
 */
function breema_cron() {
  $event_mgr = new BreemaEventMgr();
  $event_mgr->update();

  $publish_scheduler = new PublishScheduler();
  $publish_scheduler->enforceSchedule();

  // Brute force invalidate anything with the 'breema_max_age' #cache tag.
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['breema_max_age']);
}

/**
 * Returns an appropriate label given an array of entities.
 *
 * If there's only 1 entity, return the label.
 * If 2, use "LabelA and LabelB".
 * If 3 or more "Label1, ... LabelN-1 and LabelN".
 *
 * @param array $entities
 *   An array of objects that implement \Drupal\Core\Entity\EntityInterface.
 * @param callable $label_callback
 *   A function that takes an object that implements EntityInterface and
 *   returns the appropriate text or markup for the label for that Entity.
 *
 * @return string
 *   Label for all the entities with appropriate delimiter(s) depending on number.
 *
 * @see breema_fancy_implode()
 */
function breema_get_entity_label_multiple(array $entities, $label_callback) {
  return breema_fancy_implode(array_map($label_callback, $entities));
}

/**
 * Fancy version of implode() that delimits with ',' and 'and' based on count.
 *
 * If there's only 1 thing, return it.
 * If 2, use "1 and 2".
 * If 3 or more "1, ... N-1 and N".
 *
 * @param $items[]
 *   An array of strings to be glued together.
 *
 * @return string
 *   String of all the items with appropriate delimiter(s) depending on number.
 *
 * @see breema_get_entity_label_multiple()
 */
function breema_fancy_implode($items) {
  $text = '';
  $last = array_pop($items);
  $text = implode(', ', $items);
  if (!empty($text)) {
    $text .= " and $last";
  }
  else {
    $text = $last;
  }
  return $text;
}

/**
 * Label callback to return the plain entity label.
 */
function breema_entity_label_plain(EntityInterface $entity) {
  return $entity->label();
}

/**
 * Label callback to return the entity label as a link to the entity.
 */
function breema_entity_label_link(EntityInterface $entity) {
  return $entity->toLink()->toString();
}

/**
 * Label callback to return a link to an instructor's directory entry.
 */
function breema_entity_label_instructor_directory_entry(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'user') {
    $directory_entries = $entity->get('field_directory_entry')->referencedEntities();
    if (!empty($directory_entries)) {
      $directory_entry = array_pop($directory_entries);
      return $directory_entry->toLink()->toString();
    }
  }
  return $entity->label();
}

/**
 * Private helper method to load breema.install and invoke a DB update.
 */
function _breema_run_update($update_number) {
  require_once drupal_get_path('module', 'breema') . '/breema.install';
  $function = '_breema_update_' . $update_number;
  if (function_exists($function)) {
    $function();
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function breema_local_tasks_alter(&$local_tasks) {
  $local_tasks['user.register']['title'] = (string)t('Apply to the Practitioner Certificate Program');
  $local_tasks['user.register']['weight'] = 100;
}

/**
 * Generate the right warning message for an unpublished directory entry.
 *
 * @param string $warning_context
 *   Context for where the warning is being put, and what instructions to use.
 *   Valid values: 'ief', 'block', 'edit-form'.
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup
 */
function _breema_get_directory_entry_warning($warning_context, NodeInterface $entity) {
  $urls = [
    '@directory_url' => Url::fromUri('base:/directory')->toString(),
    '@delete_url' => $entity->toUrl('delete-form')->toString(),
  ];
  switch ($warning_context) {
    case 'ief':
      return t('Your directory entry is currently not published. To review and publish:<ol><li>Click the "Edit" button in this table.</li><li>Let the directory entry form load.</li><li>Review (and if needed, update) all the information.</li><li>Select the "Published" checkbox near the bottom of the form.</li><li>Click "Update Directory entry" to save the changes and hide this message.</li><li>Scroll to the bottom of this page and click "Save" to make your changes permanent.</li></ol>Alternately, you can use the "Remove" button to delete your entry entirely, but then you will not be listed in the <a href="@directory_url">International Breema Directory</a>.',
$urls);

    case 'block':
      $urls['@edit_url'] = $entity->toUrl('edit-form')->toString();
      return t('Your directory entry is currently not published. To review and publish:<ol><li>Click the <a href="@edit_url">Edit</a> button.</li><li>Let the directory entry form load.</li><li>Review (and if needed, update) all the information.</li><li>Select the "Published" checkbox near the bottom of the form.</li><li>Click "Save" to save the changes and hide this message.</li></ol>Alternately, you can use the <a href="@delete_url">Delete</a> link to remove your listing entirely, but then you will not be listed in the <a href="@directory_url">International Breema Directory</a>.', $urls);

    case 'edit-form':
      return t('Your directory entry is currently not published. To review and publish:<ol><li>Review (and if needed, update) all the information below.</li><li>Select the "Published" checkbox near the bottom of the form.</li><li>Click "Save" to save the changes and hide this message.</li></ol>Alternately, you can use the <a href="@delete_url">Delete</a> link to remove your entry entirely, but then you will not be listed in the <a href="@directory_url">International Breema Directory</a>.', $urls);

  }
}

/**
 * Strip all non-cosmetic HTML tags from a given string.
 *
 * @param string &$text_field
 *   Reference to the string to strip.
 */
function breema_strip_links(&$text_field) {
  $text_field = strip_tags(
    $text_field,
    '<p><em><i><strong><b><ul><ol><li><blockquote><h3><h4><h5><h6><ins><del><dl><dt><dd><cite><br><figure><figcaption>'
  );
}

/**
 * Implements hook_toolbar().
 */
function breema_toolbar() {
  $items = [];
  // Add a top-level 'Log out' link to the toolbar (not as a tray).
  $links = [
    'logout' => [
      'title' => t('Confirm log out'),
      // Might be tempting to reuse a Url object, but then the wrong classes get
      // added and we get into trouble. So even though we're using "the same
      // URL" for both, we need separate Url objects.
      'url' => Url::fromRoute('user.logout'),
    ],
  ];
  $items['logout'] = [
    '#type' => 'toolbar_item',
    '#wrapper_attributes' => [
      'class' => ['toolbar-tab-logout'],
    ],
    'tab' => [
      '#type' => 'link',
      '#title' => t('Log out'),
      '#url' => Url::fromRoute('user.logout'),
      '#attributes' => [
        'title' => t('Log out'),
        'class' => ['toolbar-item', 'trigger', 'toolbar-icon', 'toolbar-icon-logout'],
      ],
    ],
    'tray' => [
      '#heading' => t('Log out'),
      'logout_link' => [
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => [
          'class' => ['toolbar-menu'],
        ],
      ],
    ],
    // Ensure this is at the far left of the toolbar, right where "Log in" was.
    '#weight' => -10000,
  ];
  return $items;
}

/**
 * Implements hook_toolbar_alter().
 *
 * Hide the 'administration_search' feature from drupal/admin_toolbar [#2986082]
 * which conflicts with drupal/toolbar_responsive_search.
 */
function breema_toolbar_alter(&$items) {
  unset($items['administration_search']);
}

/**
 * Implements hook_entity_access().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity to check access to.
 * @param string $operation
 *   The operation that is to be performed on $entity.
 * @param \Drupal\Core\Session\AccountInterface $account
 *   The account trying to access the entity.
 * @return \Drupal\Core\Access\AccessResultInterface
 *   The access result.
 */
function breema_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Allow all instructors to edit an event they're teaching.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'event' && $operation === 'update') {
    $instructors = $entity->get('field_instructors')->getValue();
    foreach ($instructors as $instructor) {
      if ($instructor['target_id'] == $account->id()) {
        return AccessResult::allowed();
      }
    }
  }
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'directory_entry' && $operation === 'delete') {
    $nid = $entity->id();
    $redirects = \Drupal::service('redirect.repository')
      ->findByDestinationUri(["internal:/node/$nid", "entity:node/$nid"]);
    if (!empty($redirects) && count($redirects) > 1) {
      return AccessResult::forbidden('Directory entry has multiple redirects and should not be deleted');
    }
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_form_FORM_ID_alter() for 'node_directory_entry_delete_form'.
 *
 * Adds a warning message if the directory entry has multiple redirects.
 */
function breema_form_node_directory_entry_delete_form_alter(&$form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  $nid = $node->id();
  $redirects = \Drupal::service('redirect.repository')
    ->findByDestinationUri(["internal:/node/$nid", "entity:node/$nid"]);
  if (!empty($redirects) && count($redirects) > 1) {
    $redirect_items = [];
    foreach ($redirects as $redirect) {
      $redirect_items[] = [
        '#plain_text' => $redirect->getSourcePathWithQuery(),
      ];
    }
    $form['warning'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['messages', 'messages--warning'],
      ],
      '#weight' => '-100',
      'message' => [
        '#markup' => t('WARNING: This directory entry has multiple redirects. If you delete it, you will need to recreate them:'),
      ],
      'redirects' => [
        '#theme' => 'item_list',
        '#list_type' => 'ul',
        '#items' => $redirect_items,
      ],
    ];
  }
}

/**
 * Finds the next published event that matches the specified criteria.
 *
 * @param integer $day_of_week
 *   The day of week number. 0 = Sunday, 6 = Saturday. @see PHP's date('%w').
 * @param integer $place_nid
 *   The optional node ID (nid) of the place where the event will take place.
 * @param integer $type_tid
 *   The optional term ID (tid) of the event Category for the desired event.
 * @param string $start_time
 *   Optional start time to use for the next event, in 'hh:mm' format (24 hour).
 *
 * @return \Drupal\node\NodeInterface|NULL
 *   The fully loaded event entity that matches, or NULL if none exists.
 *
 * @see breema_preprocess_paragraph__recurring_event_tile()
 */
function breema_find_next_event($day_of_week, $place_nid = NULL, $type_tid = NULL, $start_time = '') {
  $next_event = NULL;

  // Deal with UTC timezone + DST hell. Since everything is stored in the DB as
  // UTC, if an event at the Breema Center starts at "10am", the DB will have
  // 10am UTC which is really 2am PST or 3am PDT. So, if we want to know when a
  // BC event has expired, we need to get 'now' in Oakland time, not UTC time.

  // @todo Revisit this when each event (place?) has a local timezone.

  // Start with 'now' in Oakland.
  $date = new DrupalDateTime('now', new \DateTimezone('America/Los_Angeles'));
  // Format as a date to match the storage format for datetime fields.
  $now = $date->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  $query = \Drupal::entityQuery('node')
    // Find events.
    ->condition('type', 'event')
    // That are published.
    ->condition('status', 1)
    // Where the start time is later than "now".
    ->condition('field_date_time.value', $now, '>=')
    // Ordered by start time (soonest events first).
    ->sort('field_date_time.value', 'ASC')
    // Only query for one of them.
    ->range(0, 1);
  // If the location is defined, restrict to that place.
  if (!empty($place_nid)) {
    $query->condition('field_location', $place_nid);
  }
  // If the category is defined, restrict to that taxonomy term.
  if (!empty($type_tid)) {
    $query->condition('field_categories', $type_tid);
  }

  // Since entityQuery doesn't let us handle expressions and functions directly
  // (for a day-of-week condition), we have to tag this query and inject our
  // day_of_week metadata into it, then alter the query.
  // @see breema_query_breema_day_of_week_alter().
  $query->addTag('breema_day_of_week')
    ->addMetaData('breema_day_of_week', $day_of_week)
    ->addMetaData('breema_start_time', $start_time);

  // Actually run the query.
  $nids = $query->execute();
  if (!empty($nids)) {
    $nid = array_pop($nids);
    $next_event = Node::load($nid);
  }
  return $next_event;
}

/**
 * Implements hook_query_TAG_alter() for breema_day_of_week tag.
 */
function breema_query_breema_day_of_week_alter(AlterableInterface $query) {
  $query->where(
    "DATE_FORMAT(node__field_date_time.field_date_time_value, '%w') = :day_of_week",
    [':day_of_week' => $query->getMetaData('breema_day_of_week')]
  );

  $start_time = $query->getMetaData('breema_start_time');
  if (!empty($start_time)) {
    $query->where(
      "DATE_FORMAT(node__field_date_time.field_date_time_value, '%H:%i') = :start_time",
      [':start_time' => $start_time]
    );
  }
}

/**
 * Implements hook_preprocess_views_view_fullcalendar()
 */
function breema_preprocess_views_view_fullcalendar(array &$variables) {
  $variables['#attached']['drupalSettings']['minTime'] = '07:00:00';
  $variables['#attached']['drupalSettings']['maxTime'] = '22:00:00';
}

/**
 * Implements hook_preprocess_address_plain()
 */
function breema_preprocess_address_plain(array &$variables) {
  $country = \Drupal::service('address.country_repository')->get($variables['country']['code']);
  $variables['country_three_letter'] = $country->getThreeLetterCode();

  // Address.module sometimes gives us a code, other times a name.
  // We have to figure out the best thing to print for search indexing.
  // @todo Remove this once address.module handles this correctly.
  // @see https://www.drupal.org/project/address/issues/2881391
  if (!empty($variables['locality']['code'])) {
    $variables['locality_value'] = $variables['locality']['code'];
  }
  elseif (!empty($variables['locality']['name'])) {
    $variables['locality_value'] = $variables['locality']['name'];
  }
  elseif (!is_array($variables['locality'])) {
    $variables['locality_value'] = $variables['locality'];
  }
}

/**
 * Implements HOOK_entity_base_field_info_alter().
 *
 * Make 'uid' and 'created' fields configurable (to hide them from search!).
 */
function breema_entity_base_field_info_alter(&$base_field_definitions, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    $base_field_definitions['uid']->setDisplayConfigurable('view', TRUE);
    $base_field_definitions['created']->setDisplayConfigurable('view', TRUE);
  }
}

/**
 * Implements HOOK_entity_type_build().
 *
 * Make 'uid' and 'created' fields configurable (to hide them from search!).
 */
function breema_entity_type_build(array &$entity_types) {
  $entity_types['node']->set('enable_base_field_custom_preprocess_skipping', TRUE);
}

/**
 * Implements HOOK_ranking().
 */
function breema_ranking() {
  $rankings = [];
  // First, add rankings for all node types.
  $types = \Drupal::service('entity_type.bundle.info')->getBundleInfo('node');
  foreach ($types as $id => $info) {
    $rankings["type_$id"] = [
      'title' => t('Content type:') . ' ' . $info['label'],
      'score' => "CASE n.type WHEN '$id' THEN 1 ELSE 0 END",
    ];
  }

  $event_join = [
    'type' => 'LEFT',
    'table' => 'node__field_date_time',
    'alias' => 'nfdt',
    'on' => 'nfdt.revision_id = n.vid',
  ];

  // Now, add event-specific rankings based on date/time.
  // @todo Fix this when we have accurate event-specific timezones.
  $now = new DrupalDateTime('-12 hours');
  $now->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
  $db_now = $now->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  $this_week = new DrupalDateTime('+1 week');
  $this_week->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
  $db_week = $this_week->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  $this_month = new DrupalDateTime('+1 month');
  $this_month->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
  $db_month = $this_month->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  $rankings['event_week'] = [
    'title' => t('Event: This week'),
    'join' => $event_join,
    'score' => "nfdt.field_date_time_value BETWEEN '$db_now' AND '$db_week'",
  ];

  $rankings['event_month'] = [
    'title' => t('Event: This month'),
    'join' => $event_join,
    'score' => "nfdt.field_date_time_value BETWEEN '$db_week' AND '$db_month'",
  ];

  $rankings['event_future'] = [
    'title' => t('Event: Future'),
    'join' => $event_join,
    'score' => "nfdt.field_date_time_value >= '$db_month'",
  ];

  $rankings['event_past'] = [
    'title' => t('Event: Past'),
    'join' => $event_join,
    'score' => "nfdt.field_date_time_end_value < '$db_now'",
  ];

  return $rankings;
}
