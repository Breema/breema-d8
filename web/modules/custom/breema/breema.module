<?php

/**
 * @file
 * Contains breema.module.
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;
use Drupal\views\ResultRow;

use Drupal\breema\BreemaEventMgr;
use Drupal\flag\Entity\Flagging;

/**
 * Implements hook_help().
 */
function breema_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the breema module.
    case 'help.page.breema':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code for www.breema.com') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 */
function breema_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'breema/global';
}

/**
 * Implements hook_preprocess_html().
 */
function breema_preprocess_html(&$variables) {
  // Work-around the bugs from https://www.drupal.org/node/953034
  // For now, hard-code that anonymous users on /directory* should not see the
  // sidebar.
  if (empty($variables['logged_in'])) {
    switch ($variables['root_path']) {
      case 'directory':
      case 'search':
        unset($variables['page']['sidebar_first']);
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for nodes.
 *
 * Calls out to bundle-specific functions.
 */
function breema_preprocess_node(&$variables) {
  switch ($variables['node']->getType()) {
    case 'event':
      breema_preprocess_node_event($variables);
      break;

    case 'product':
      breema_preprocess_node_product($variables);
      break;

  }
}

/**
 * Preprocess function for event nodes.
 *
 * Special handling for field_parent_event and field_subtitle on schedule nodes.
 * If there are required hours, cleanup how that is displayed.
 * Magic for rendering info about instructors (e.g. as links to directory
 * entries).
 */
function breema_preprocess_node_event(&$variables) {
  if ($variables['view_mode'] == 'full') {
    if (!empty($variables['content']['field_parent_event'][0])) {
      $variables['content']['field_parent_event']['#title'] = t('Part of the');
      $variables['content']['field_subtitle']['#access'] = FALSE;
    }
    if (!empty($variables['content']['field_required_hours'][0])) {
      $hours = $variables['node']->field_required_hours->get(0)->value;
      $variables['content']['field_required_hours'] = [
        '#type' => 'markup',
        '#prefix' => '<div class="field-name-field-required-hours>',
        '#markup' => new PluralTranslatableMarkup($hours, '1 class hour required.', '@hours class hours required.', ['@hours' => $hours]),
        '#suffix' => '</div>',
      ];
    }
  }
  if (!empty($variables['content']['field_instructors'])) {
    $instructors = $variables['node']->get('field_instructors')->referencedEntities();
    if (!empty($instructors)) {
      $label_callback = $variables['view_mode'] == 'full' ? 'breema_entity_label_instructor_directory_entry' : 'breema_entity_label_plain';
      $variables['content']['field_instructors'] = [
        '#type' => 'markup',
        '#prefix' => '<div>',
        // Using the normal plural formatting class (PluralTranslatableMarkup)
        // auto-sanitizes and breaks our links. So we manually check the count
        // and do this "raw". This would be broken for RTL languages, but we
        // won't worry about that for now.
        '#markup' => (count($instructors) == 1 ? t('Instructor: ') : t('Instructors: ')) . breema_get_entity_label_multiple($instructors, $label_callback),
        '#suffix' => '</div>',
        '#weight' => isset($variables['content']['field_instructors']['#weight']) ? $variables['content']['field_instructors']['#weight'] : 0,
      ];
    }
  }
}

/**
 * Preprocess function for product nodes.
 *
 * Looks up and injects the 'Buy now' link from the 1st product info paragraph
 * into the 'compact teaser' of the main product itself.
 */
function breema_preprocess_node_product(&$variables) {
  if ($variables['view_mode'] == 'teaser_compact') {
    $all_product_info = $variables['node']->get('field_product_info')->referencedEntities();
    $main_product_info = array_pop($all_product_info);
    $buy_now_link = $main_product_info->get('field_buy_now')->getValue();
    $variables['content']['buy_now'] = [
      '#type' => 'link',
      '#title' => t('Buy now'),
      '#url' => Url::fromUri($buy_now_link[0]['uri']),
      '#prefix' => '<div class="field--name-field-buy-now">',
      '#suffix' => '</div>',
    ];
    $variables['#attached']['library'][] = 'breema/store';
  }
}

/**
 * Preprocess function for 'Featured events' paragraph type.
 *
 * Injects the map and list displays of the 'breema_events_featured' view.
 * Converts field_header_text into an h2.
 * Injects links to the /events/* pages (calendar, map + search).
 */
function breema_preprocess_paragraph__event_featured(&$variables) {
  foreach (['map', 'list'] as $display_type) {
    $display = 'block_' . $display_type;
    $view = Views::getView('breema_events_featured');
    $view->setDisplay($display);
    $view->execute();
    if (count($view->result)) {
      $variables['content'][$display] = $view->preview($display);
    }
  }
  $variables['content']['field_header_text']['#prefix'] = '<h2>';
  $variables['content']['field_header_text']['#suffix'] = '</h2>';
  $variables['content']['actions'] = [
    '#type' => 'container',
    '#weight' => 100,
    '#attributes' => ['class' => ['container-inline']],
    'header' => [
      '#weight' => -10,
      '#prefix' => '<h3>',
      '#markup' => t('More Breema events'),
      '#suffix' => '</h3>',
    ],
  ];
  $actions = [
    'calendar' => '/events',
    'map' => '/events/map',
    'search' => '/events/search',
  ];
  foreach ($actions as $action => $action_path) {
    $url = Url::fromUri('internal:' . $action_path);
    $variables['content']['actions'][$action] = [
      '#prefix' => '<div class="action-secondary inline">',
      '#markup' => t('<a href=":url">:label</a>', [':url' => $url->toString(), ':label' => Unicode::ucfirst($action)]),
      '#suffix' => '</div>',
    ];
  }
}

/**
 * Implements hook_theme_registry_alter()
 */
function breema_theme_registry_alter(&$theme_registry) {
  $breema_path = drupal_get_path('module', 'breema') . '/templates';
  $theme_registry['field__paragraph__field_book_type'] = [
    'path' => $breema_path,
    'template' => 'field--paragraph--field-book-type',
  ] + $theme_registry['field'];
  $theme_registry['field__paragraph__field_description'] = [
    'path' => $breema_path,
    'template' => 'field--paragraph--field-description',
  ] + $theme_registry['field'];
  $theme_registry['geolocation_common_map_display']['path'] = $breema_path;
  $theme_registry['paragraph__product_info_audio'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-audio',
  ] + $theme_registry['paragraph'];
  $theme_registry['paragraph__product_info_book'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-book',
  ] + $theme_registry['paragraph'];
  $theme_registry['paragraph__product_info_general'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-general',
  ] + $theme_registry['paragraph'];
}

/**
 * Implements hook_views_pre_render().
 */
function breema_views_pre_render(ViewExecutable $view) {
  if (isset($view)) {
    switch($view->storage->id()) {
      case 'breema_directory':
        $view->element['#attached']['library'][] = 'breema/views.breema_directory';
        $view->element['#attached']['library'][] = 'breema/views.geolocation_map';

        $view->element['#attached']['library'][] = 'breema/directory_entry';
        break;

      case 'breema_event_map':
        $view->element['#attached']['library'][] = 'breema/views.geolocation_map';
        break;

      case 'breema_place_browser':
        $view->element['#attached']['library'][] = 'breema/entity-browser';
        break;

      case 'breema_events_by_instructor':
        return breema_views_pre_render_breema_events_by_instructor($view);
    }
  }
}

/**
 * Implements hook_views_pre_render() for breema_events_by_instructor.
 *
 * On the 'block_map' display, inject the instructor's directory entry, if any.
 */
function breema_views_pre_render_breema_events_by_instructor(ViewExecutable $view) {
  if ($view->current_display == 'block_map') {
    $user_argument = $view->display_handler->getHandler('argument', 'field_instructors_target_id');
    if (!empty($user_argument)) {
      $instructor = User::load($user_argument->getValue());
      if (!empty($instructor)) {
        $directory_entries = $instructor->get('field_directory_entry')->referencedEntities();
        if (!empty($directory_entries)) {
          $directory_entry = array_pop($directory_entries);
          $result = new ResultRow();
          // Pretend this is the location for an event, since it has all the
          // same fields we need: title, address and geolocation.
          $result->_relationship_entities['field_location'] = $directory_entry;
          $result->index = count($view->result);
          if (empty($view->result)) {
            $gmap_settings = &$view->display_handler->getPlugin('style')->options['google_map_settings'];
            $gmap_settings['width'] = '300px';
            $gmap_settings['height'] = '300px';
            $gmap_settings['maxZoom'] = 10;
          }
          $view->result[] = $result;
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Sets an #after_build callback on media entity forms to hide revision log.
 */
function breema_form_alter(&$form, FormStateInterface $form_state) {
  switch ($form['#form_id']) {
    case 'entity_browser_image_browser_form':
    case 'entity_browser_image_embed_form':
    case 'entity_browser_media_browser_form':
    case 'entity_browser_media_embed_form':
      if (!empty($form['widget'])) {
        $form['widget']['#after_build'][] = 'breema_entity_browser_media_after_build';
      }
      break;
  }
}

/**
 * #after_build callback for media inline_entity_form elements.
 *
 * Hides the (totally confusion and pointless) revision log element.
 */
function breema_entity_browser_media_after_build($form_element, FormStateInterface $form_state) {
  if (!empty($form_element['inline_entity_form']['revision_log_message'])) {
    $form_element['inline_entity_form']['revision_log_message']['#access'] = FALSE;
  }
  return $form_element;
}

/**
 * Implements hook_form_FORM_ID_alter() for 'node_form'.
 *
 * Adds a custom section on directory_entry forms to reference user pictures.
 */
function breema_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->bundle() == 'directory_entry') {
    $author = $node->get('uid')->getValue();
    $author_uid = $author[0]['target_id'];
    $current_page = Url::fromRoute('<current>');
    $url_options['query']['destination'] = $current_page->toString();
    $url_options['fragment'] = 'edit-user-picture-wrapper';
    $edit_url = Url::fromRoute('entity.user.edit_form', ['user' => $author_uid], $url_options);

    $author_entity = user_load($author_uid);
    $user_picture = $author_entity->get('user_picture')->getValue();
    $form['headshot'] = [
      '#type' => 'details',
      '#title' => t('Headshot image'),
      '#open' => TRUE,
      '#weight' => 9,
    ];
    if (!empty($user_picture)) {
      $form['headshot']['current'] = user_view($author_entity, 'compact');
      $form['headshot']['help'] = [
        '#type' => 'item',
        '#description' => t('You must <a href=":edit">edit your user account</a> and use the <em>Picture</em> field to manage the image displayed with your directory entry.', [':edit' => $edit_url->toString()]),
      ];
    }
    else {
      $form['headshot']['help'] = [
        '#type' => 'item',
        '#description' => t('If you <a href=":edit">edit your user account</a> you can upload an image in the <em>Picture</em> field and it will be displayed with your directory entry.', [':edit' => $edit_url->toString()]),
      ];
    }
    // If not already defined, set default values for first and last name based
    // on the values in the user entity.
    foreach (['last', 'first'] as $name_type) {
      $field_name = 'field_name_' . $name_type;
      if (empty($form[$field_name]['widget'][0]['value']['#default_value'])) {
        $form[$field_name]['widget'][0]['value']['#default_value'] = $author_entity->get($field_name)->value;
      }
    }
  }
  else if ($node->bundle() == 'product') {
    $form['field_by']['widget'][0]['#after_build'][] = 'breema_product_node_form_after_build';
  }
  else if ($node->bundle() == 'event') {
    if (!empty($form['field_parent_event']['widget'][0]['target_id']['#default_value'])) {
      $form['title']['#access'] = FALSE;
      $form['field_subtitle']['widget'][0]['value']['#required'] = TRUE;
    }
  }
}

/**
 * #after_build callback for field_by on product nodes.
 */
function breema_product_node_form_after_build($form_element, FormStateInterface $form_state) {
  $form_element['format']['#access'] = FALSE;
  return $form_element;
}

/**
 * Implements hook_form_FORM_ID_alter() for 'views_exposed_form'.
 *
 * Sets more sane sizes for the various text field exposed filters.
 */
function breema_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $filter_sizes = [
    'postal_code' => 10,
    'telephone' => 15,
    'email' => 20,
    'city' => 20,
    'job_title' => 20,
    'search' => 20,
  ];
  foreach ($filter_sizes as $key => $size) {
    if (!empty($form[$key])) {
      $form[$key]['#size'] = $size;
    }
  }

  if (!empty($form['geolocation_op'])) {
    $form['geolocation_op']['#title'] = t('Geolocation');
    $form['geolocation_op']['#options'] = [
      ' ' => t('- Any -'),
      'not empty' => t('Defined'),
      'empty' => t('Undefined'),
    ];
    $form['geolocation_op']['#default_value'] = ' ';
  }

  // Completely hide the boundary filters so they don't flicker on JS loading.
  if (!empty($form['boundary'])) {
    foreach (Element::children($form['boundary']) as $key) {
      $form['boundary'][$key]['#type'] = 'hidden';
    }
  }

  if (!empty($form['country'])) {
    $breema_countries = \Drupal::state()->get('breema.breema_countries', []);
    if (empty($breema_countries)) {
      $query = \Drupal::database()->select('node__field_address', 'nfa');
      $query->addField('nfa', 'field_address_country_code');
      $query->distinct();
      $results = array_filter($query->execute()->fetchCol());
      $breema_countries = array_combine($results, $results);
      \Drupal::state()->set('breema.breema_countries', $breema_countries);
    }

    $country_list = array_keys($form['country']['#options']);
    foreach ($country_list as $country) {
      if ($country != 'All' && empty($breema_countries[$country])) {
        unset($form['country']['#options'][$country]);
      }
    }
  }

  if (!empty($form['end_datetime_op'])) {
    $form['end_datetime_op']['#title'] = t('Date/time');
    $form['end_datetime_op']['#options'] = [
      'not empty' => t('- Any -'),
      '>=' => t('Upcoming'),
      '<=' => t('Past'),
    ];
    $form['end_datetime']['#access'] = FALSE;
  }

  $view = $form_state->getStorage('view');
  switch ($view['view']->id()) {
    case 'media':
    case 'media_entity_browser':
      $media_types = [
        'file' => 'file_type',
        'image' => 'image_type',
        'video' => 'video_type',
      ];
      foreach ($media_types as $type_name => $type_element) {
        if (!empty($form['type']) && !empty($form[$type_element])) {
          $form[$type_element]['#states'] = [
            'visible' => [
              ':input[name="type"]' => ['value' => $type_name],
            ],
          ];
        }
      }
      if (!empty($form['langcode'])) {
        $form['langcode']['#access'] = FALSE;
      }
      break;

    case 'breema_directory':
      $form['type']['#options']['directory_entry'] = t('Person');
      $form['certification']['#options'] = [
        'practitioner' => t('Breema Practitioner'),
        'inst-self-breema' => t('Self-Breema Instructor'),
        'inst-breema' => t('Breema Instructor'),
      ];
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_login_form'.
 *
 * Remove unneeded #description text and fix #title for 'name' element.
 */
function breema_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['name']['#title'] = t('Username or email address');
  $form['name']['#description'] = '';
  $form['pass']['#description'] = '';
}

/**
 * Implements hook_entity_type_alter().
 */
function breema_entity_type_alter(array &$entity_types) {
  $entity_types['node']->setLinkTemplate('clone-form', '/node/{node}/clone');
  $entity_types['node']->setLinkTemplate('add-schedule-form', '/node/{node}/add-schedule');
}

/**
 * Implements hook_entity_operation().
 */
function breema_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'event') {
    $operations['clone_form'] = [
      'title' => t('Clone'),
      'url' => $entity->toUrl('clone-form'),
      'weight' => 50,
    ];
    if (empty($entity->get('field_parent_event')->getValue())) {
      $operations['add_schedule_form'] = [
        'title' => t('Add schedule'),
        'url' => $entity->toUrl('add-schedule-form'),
        'weight' => 40,
      ];
    }
  }
  return $operations;
}

/**
 * Implements hook_ENTITY_TYPE_insert() as hook_node_insert().
 */
function breema_node_insert(NodeInterface $node) {
  breema_node_cud($node, 'insert');
}

/**
 * Implements hook_ENTITY_TYPE_update() as hook_node_update().
 */
function breema_node_update(NodeInterface $node) {
  breema_node_cud($node, 'update');
}

/**
 * Implements hook_ENTITY_TYPE_delete() as hook_node_delete().
 */
function breema_node_delete(NodeInterface $node) {
  breema_node_cud($node, 'delete');
}

/**
 * Shared code invoked on any node CUD (Create, Update, Delete) operation.
 *
 * Invokes bundle-specific helper functions.
 */
function breema_node_cud(NodeInterface $node, $operation) {
  switch ($node->bundle()) {
    case 'directory_entry':
      breema_node_cud__directory_entry($node, $operation);
      break;

    case 'event':
      breema_node_cud__event($node, $operation);
      break;

    case 'place':
      breema_node_cud__place($node, $operation);
      break;

  }
}

/**
 * Callback invoked for any directory_entry node CUD operation.
 *
 * Clears the list of Breema countries when touching any directory entry.
 *
 * Also keeps field_directory_entry (on the user entity) consistent for the
 * owner of any directory entry node.
 */
function breema_node_cud__directory_entry(NodeInterface $node, $operation) {
  \Drupal::state()->delete('breema.breema_countries');
  $uid = $node->getOwnerId();
  $account = User::load($uid);
  if (!empty($account)) {
    $account->set('field_directory_entry', $operation == 'delete' ? NULL : $node->id());
    $account->save();
  }
}

/**
 * Callback invoked for any event node CUD (Create, Update, Delete) operation.
 *
 * Retest (and if needed, update) field_has_active_event and
 * field_upcoming_events on all place and directory entry nodes.
 *
 * Ensure that the location is added to 'My places' for all instructors.
 */
function breema_node_cud__event(NodeInterface $node, $operation) {
  $event_mgr = new BreemaEventMgr();
  $event_mgr->update();

  $instructors = $node->get('field_instructors')->getValue();
  if ($operation != 'delete' && !empty($instructors)) {
    $places = $node->get('field_location')->referencedEntities();
    $place = array_pop($places);
    foreach ($instructors as $instructor) {
      breema_ensure_flag('my_places', $place, $instructor['target_id']);
    }
  }
}

/**
 * Callback invoked for any place node CUD (Create, Update, Delete) operation.
 *
 * Ensure that the location is added to 'My places' for the owner.
 */
function breema_node_cud__place(NodeInterface $node, $operation) {
  if ($operation != 'delete') {
    breema_ensure_flag('my_places', $node, $node->getOwnerId());
  }
}

/**
 * Ensure that the given user has flagged the given node with the given flag.
 */
function breema_ensure_flag($flag_id, NodeInterface $node, $uid) {
  static $existing_flag_uids = [];
  $flag = \Drupal::service('flag')->getFlagById($flag_id);
  if (empty($existing_flag_uids[$node->id()])) {
    $flaggings = \Drupal::service('flag')->getEntityFlaggings($flag, $node);
    foreach ($flaggings as $flagging) {
      $existing_flag_uids[$node->id()][$flagging->getOwnerId()] = TRUE;
    }
  }
  if (empty($existing_flag_uids[$node->id()][$uid])) {
    $values = [
      'flag_id' => $flag_id,
      'entity_type' => 'node',
      'entity_id' => $node->id(),
      'flagged_entity' => $node->id(),
      'uid' => $uid
    ];
    $flagging = \Drupal::entityManager()->getStorage('flagging')->create($values);
    $flagging->save();
    $existing_flag_uids[$node->id()][$uid] = TRUE;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 *
 * On schedule (child) events, set title based on subtitle and parent title.
 */
function breema_node_presave(NodeInterface $node) {
  if ($node->bundle() == 'event') {
    $parent_value = $node->get('field_parent_event')->getValue();
    if (!empty($parent_value)) {
      $parent_events = $node->get('field_parent_event')->referencedEntities();
      $parent_event = array_pop($parent_events);
      $title = $node->get('field_subtitle')->value . ' - ' . $parent_event->label();
      $node->setTitle($title);
    }
  }
}

/**
 * Implements hook_entity_create_access().
 */
function breema_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $user = \Drupal\user\Entity\User::load($account->id());
  if (!$user->hasRole('content_editor')
      && $context['entity_type_id'] == 'node'
      && $entity_bundle == 'directory_entry')
  {
    // Deny creation if this user already owns a directory entry node.
    $directory_entry = $user->get('field_directory_entry')->getValue();
    if (!empty($directory_entry)) {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}

/**
 * Creates a merged title with the main title and optional subtitle.
 */
function breema_merge_titles(\Drupal\node\NodeInterface $node) {
  $merged_title = '';
  if ($node->hasField('field_title_main')) {
    $main_title = $node->get('field_title_main')->getValue();
    $merged_title = $main_title[0]['value'];
    if ($node->hasField('field_title_sub')) {
      $subtitle = $node->get('field_title_sub')->getValue();
      if (!empty($subtitle)) {
        $merged_title .= ': ' . $subtitle[0]['value'];
      }
    }
  }
  return $merged_title;
}

/**
 * Implements hook_entity_view_alter().
 */
function breema_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'directory_entry') {
    $build['#attached']['library'][] = 'breema/directory_entry';
    $author = $build['#node']->get('uid')->getValue();
    if (!empty($author[0]['target_id'])) {
      $author_uid = $author[0]['target_id'];
    }
    if (!empty($author_uid)) {
      $access_manager = \Drupal::service('access_manager');
      if ($access_manager->checkNamedRoute('entity.user.contact_form', ['user' => $author_uid])) {
        $contact_url = Url::fromRoute('entity.user.contact_form', ['user' => $author_uid]);
      }
      $author_entity = user_load($author_uid);
      $user_picture = $author_entity->get('user_picture')->getValue();
    }

    if (!empty($user_picture)) {
      $user_picture_file = file_load($user_picture[0]['target_id']);
      $build['headshot'] = [
        '#theme' => 'image_style',
        '#style_name' => $build['#view_mode'] == 'full' ? 'medium' : 'thumbnail',
        '#weight' => -1,
        '#prefix' => '<div class="headshot">',
        '#suffix' => '</div>',
        '#uri' => $user_picture_file->getFileUri(),
        '#alt' => t('Profile image for @user_name', ['@user_name' => $author_entity->getAccountName()]),
      ];
    }

    if (!empty($contact_url)) {
      $build['contact_link'] = [
        '#weight' => 6,
        '#prefix' => '<div class="contact-form-link">',
        '#markup' => t('<a href=":contact">Send message</a>', [':contact' => $contact_url->toString()]),
        '#suffix' => '</div>',
      ];
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Retest (and if needed, update) field_has_active_event and
 * field_upcoming_events on all place and directory entry nodes.
 */
function breema_cron() {
  $event_mgr = new BreemaEventMgr();
  $event_mgr->update();
}

/**
 * Returns an appropriate label given an array of entities.
 *
 * If there's only 1 entity, return the label.
 * If 2, use "LabelA and LabelB".
 * If 3 or more "Label1, ... LabelN-1 and LabelN".
 *
 * @param array $entities
 *   An array of objects that implement \Drupal\Core\Entity\EntityInterface.
 * @param callable $label_callback
 *   A function that takes an object that implements EntityInterface and
 *   returns the appropriate text or markup for the label for that Entity.
 *
 * @return string
 *   Label for all the entities with appropriate delimiter(s) depending on number.
 */
function breema_get_entity_label_multiple(array $entities, $label_callback) {
  $text = '';
  $last = array_pop($entities);
  $last_label = $label_callback($last);
  $text = implode(', ', array_map($label_callback, $entities));
  if (!empty($text)) {
    $text .= " and $last_label";
  }
  else {
    $text = $last_label;
  }
  return $text;
}

/**
 * Label callback to return the plain entity label.
 */
function breema_entity_label_plain(EntityInterface $entity) {
  return $entity->label();
}

/**
 * Label callback to return the entity label as a link to the entity.
 */
function breema_entity_label_link(EntityInterface $entity) {
  return $entity->toLink()->toString();
}

/**
 * Label callback to return a link to an instructor's directory entry.
 */
function breema_entity_label_instructor_directory_entry(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'user') {
    $directory_entries = $entity->get('field_directory_entry')->referencedEntities();
    if (!empty($directory_entries)) {
      $directory_entry = array_pop($directory_entries);
      return $directory_entry->toLink()->toString();
    }
  }
  return $entity->label();
}
