<?php

/**
 * @file
 * Contains breema.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\ViewExecutable;
use Drupal\views\ResultRow;

use Drupal\breema\BreemaEventMgr;

/**
 * Implements hook_help().
 */
function breema_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the breema module.
    case 'help.page.breema':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom code for www.breema.com') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments().
 */
function breema_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'breema/global';
}

/**
 * Implements hook_preprocess_html().
 */
function breema_preprocess_html(&$variables) {
  // Work-around the bugs from https://www.drupal.org/node/953034
  // For now, hard-code that anonymous users on /directory* should not see the
  // sidebar.
  if (empty($variables['logged_in'])) {
    switch ($variables['root_path']) {
      case 'directory':
      case 'search':
        unset($variables['page']['sidebar_first']);
        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for nodes.
 *
 * Calls out to bundle-specific functions.
 */
function breema_preprocess_node(&$variables) {
  switch ($variables['node']->getType()) {
    case 'event':
      breema_preprocess_node_event($variables);
      break;
  }
}

/**
 * Preprocess function for event nodes.
 *
 * If the required hours field is empty, print a message that it's open to all.
 */
function breema_preprocess_node_event(&$variables) {
  if ($variables['view_mode'] == 'full') {
    if (empty($variables['content']['field_required_hours'][0])) {
      $variables['content']['field_required_hours'][0] = [
        '#type' => 'markup',
        '#markup' => t('Open to everyone, beginners welcome.'),
      ];
    }
  }
}

/* *
 * Implements hook_theme_registry_alter()
 */
function breema_theme_registry_alter(&$theme_registry) {
  $breema_path = drupal_get_path('module', 'breema') . '/templates';
  $theme_registry['field__paragraph__field_book_type'] = [
    'path' => $breema_path,
    'template' => 'field--paragraph--field-book-type',
  ] + $theme_registry['field'];
  $theme_registry['field__paragraph__field_description'] = [
    'path' => $breema_path,
    'template' => 'field--paragraph--field-description',
  ] + $theme_registry['field'];
  $theme_registry['geolocation_common_map_display']['path'] = $breema_path;
  $theme_registry['paragraph__product_info_audio'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-audio',
  ] + $theme_registry['paragraph'];
  $theme_registry['paragraph__product_info_book'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-book',
  ] + $theme_registry['paragraph'];
  $theme_registry['paragraph__product_info_general'] = [
    'path' => $breema_path,
    'template' => 'paragraph--product-info-general',
  ] + $theme_registry['paragraph'];
}

/**
 * Implements hook_views_pre_render().
 */
function breema_views_pre_render(ViewExecutable $view) {
  if (isset($view)) {
    switch($view->storage->id()) {
      case 'breema_directory':
        $view->element['#attached']['library'][] = 'breema/views.breema_directory';
        $view->element['#attached']['library'][] = 'breema/directory_entry';
        break;

      case 'breema_place_browser':
        $view->element['#attached']['library'][] = 'breema/entity-browser';
        break;

      case 'breema_events_by_instructor':
        return breema_views_pre_render_breema_events_by_instructor($view);
    }
  }
}

/**
 * Implements hook_views_pre_render() for breema_events_by_instructor.
 *
 * On the 'block_map' display, inject the instructor's directory entry, if any.
 */
function breema_views_pre_render_breema_events_by_instructor(ViewExecutable $view) {
  if ($view->current_display == 'block_map') {
    $user_argument = $view->display_handler->getHandler('argument', 'field_instructors_target_id');
    if (!empty($user_argument)) {
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'directory_entry')
        ->condition('uid', $user_argument->getValue());
      $nids = $query->execute();
      if (!empty($nids)) {
        $directory_entry = entity_load('node', array_pop($nids));
        if (!empty($directory_entry)) {
          $result = new ResultRow();
          // Pretend this is the location for an event, since it has all the
          // same fields we need: title, address and geolocation.
          $result->_relationship_entities['field_location'] = $directory_entry;
          $result->index = count($view->result);
          if (empty($view->result)) {
            $gmap_settings = &$view->display_handler->getPlugin('style')->options['google_map_settings'];
            $gmap_settings['width'] = '300px';
            $gmap_settings['height'] = '300px';
            $gmap_settings['maxZoom'] = 10;
          }
          $view->result[] = $result;
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Sets an #after_build callback on media entity forms to hide revision log.
 */
function breema_form_alter(&$form, FormStateInterface $form_state) {
  switch ($form['#form_id']) {
    case 'entity_browser_image_browser_form':
    case 'entity_browser_image_embed_form':
    case 'entity_browser_media_browser_form':
    case 'entity_browser_media_embed_form':
      if (!empty($form['widget'])) {
        $form['widget']['#after_build'][] = 'breema_entity_browser_media_after_build';
      }
      break;
  }
}

/**
 * #after_build callback for media inline_entity_form elements.
 *
 * Hides the (totally confusion and pointless) revision log element.
 */
function breema_entity_browser_media_after_build($form_element, FormStateInterface $form_state) {
  if (!empty($form_element['inline_entity_form']['revision_log_message'])) {
    $form_element['inline_entity_form']['revision_log_message']['#access'] = FALSE;
  }
  return $form_element;
}

/**
 * Implements hook_form_FORM_ID_alter() for 'node_form'.
 *
 * Adds a custom section on directory_entry forms to reference user pictures.
 */
function breema_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if ($node->bundle() == 'directory_entry') {
    $author = $node->get('uid')->getValue();
    $author_uid = $author[0]['target_id'];
    $current_page = Url::fromRoute('<current>');
    $url_options['query']['destination'] = $current_page->toString();
    $url_options['fragment'] = 'edit-user-picture-wrapper';
    $edit_url = Url::fromRoute('entity.user.edit_form', ['user' => $author_uid], $url_options);

    $author_entity = user_load($author_uid);
    $user_picture = $author_entity->get('user_picture')->getValue();
    $form['headshot'] = [
      '#type' => 'details',
      '#title' => t('Headshot image'),
      '#open' => TRUE,
      '#weight' => 9,
    ];
    if (!empty($user_picture)) {
      $form['headshot']['current'] = user_view($author_entity, 'compact');
      $form['headshot']['help'] = [
        '#type' => 'item',
        '#description' => t('You must <a href=":edit">edit your user account</a> and use the <em>Picture</em> field to manage the image displayed with your directory entry.', [':edit' => $edit_url->toString()]),
      ];
    }
    else {
      $form['headshot']['help'] = [
        '#type' => 'item',
        '#description' => t('If you <a href=":edit">edit your user account</a> you can upload an image in the <em>Picture</em> field and it will be displayed with your directory entry.', [':edit' => $edit_url->toString()]),
      ];
    }
  }
  else if ($node->bundle() == 'product') {
    $form['field_by']['widget'][0]['#after_build'][] = 'breema_product_node_form_after_build';
  }
}

/**
 * #after_build callback for field_by on product nodes.
 */
function breema_product_node_form_after_build($form_element, FormStateInterface $form_state) {
  $form_element['format']['#access'] = FALSE;
  return $form_element;
}

/**
 * Implements hook_form_FORM_ID_alter() for 'views_exposed_form'.
 *
 * Sets more sane sizes for the various text field exposed filters.
 */
function breema_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $filter_sizes = [
    'postal_code' => 10,
    'telephone' => 15,
    'email' => 20,
    'city' => 20,
    'job_title' => 20,
    'search' => 20,
  ];
  foreach ($filter_sizes as $key => $size) {
    if (!empty($form[$key])) {
      $form[$key]['#size'] = $size;
    }
  }

  if (!empty($form['geolocation_op'])) {
    $form['geolocation_op']['#title'] = t('Geolocation');
    $form['geolocation_op']['#options'] = [
      ' ' => t('- Any -'),
      'not empty' => t('Defined'),
      'empty' => t('Undefined'),
    ];
    $form['geolocation_op']['#default_value'] = ' ';
  }

  // Completely hide the boundary filters so they don't flicker on JS loading.
  if (!empty($form['boundary'])) {
    foreach (Element::children($form['boundary']) as $key) {
      $form['boundary'][$key]['#type'] = 'hidden';
    }
  }

  if (!empty($form['country'])) {
    $breema_countries = \Drupal::state()->get('breema.breema_countries', []);
    if (empty($breema_countries)) {
      $query = \Drupal::database()->select('node__field_address', 'nfa');
      $query->addField('nfa', 'field_address_country_code');
      $query->distinct();
      $results = array_filter($query->execute()->fetchCol());
      $breema_countries = array_combine($results, $results);
      \Drupal::state()->set('breema.breema_countries', $breema_countries);
    }

    $country_list = array_keys($form['country']['#options']);
    foreach ($country_list as $country) {
      if ($country != 'All' && empty($breema_countries[$country])) {
        unset($form['country']['#options'][$country]);
      }
    }
  }

  $view = $form_state->getStorage('view');
  switch ($view['view']->id()) {
    case 'media':
    case 'media_entity_browser':
      $media_types = [
        'file' => 'file_type',
        'image' => 'image_type',
        'video' => 'video_type',
      ];
      foreach ($media_types as $type_name => $type_element) {
        if (!empty($form['type']) && !empty($form[$type_element])) {
          $form[$type_element]['#states'] = [
            'visible' => [
              ':input[name="type"]' => ['value' => $type_name],
            ],
          ];
        }
      }
      if (!empty($form['langcode'])) {
        $form['langcode']['#access'] = FALSE;
      }
      break;

    case 'breema_directory':
      $form['type']['#options']['directory_entry'] = t('Person');
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'user_login_form'.
 *
 * Remove unneeded #description text and fix #title for 'name' element.
 */
function breema_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['name']['#title'] = t('Username or email address');
  $form['name']['#description'] = '';
  $form['pass']['#description'] = '';
}

/**
 * Implements hook_ENTITY_TYPE_insert() as hook_node_insert().
 */
function breema_node_insert(NodeInterface $node) {
  breema_node_cud($node);
}

/**
 * Implements hook_ENTITY_TYPE_update() as hook_node_update().
 */
function breema_node_update(NodeInterface $node) {
  breema_node_cud($node);
}

/**
 * Implements hook_ENTITY_TYPE_delete() as hook_node_delete().
 */
function breema_node_delete(NodeInterface $node) {
  breema_node_cud($node);
}

/**
 * Shared code invoked on any node CUD (Create, Update, Delete) operation.
 *
 * Clears the list of Breema countries when touching any directory entry.
 *
 * Retest (and if needed, update) field_has_active_event on all place nodes
 * whenever an event node is touched.
 */
function breema_node_cud(NodeInterface $node) {
  switch ($node->bundle()) {
    case 'directory_entry':
      \Drupal::state()->delete('breema.breema_countries');
      break;

    case 'event':
      $event_mgr = new BreemaEventMgr();
      $event_mgr->updateActivePlaces();
      break;
  }
}

/**
 * Implements hook_entity_create_access().
 */
function breema_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $user = \Drupal\user\Entity\User::load($account->id());
  if (!$user->hasRole('content_editor')) {
    $entity_type_id = $context['entity_type_id'];
    if ($entity_type_id == 'node' && $entity_bundle == 'directory_entry') {
      // Deny creation if this user already owns a directory entry node.
      $query = \Drupal::entityQuery('node')
             ->condition('type', 'directory_entry')
             ->condition('uid', $account->id());
      $nids = $query->execute();
      if (!empty($nids)) {
        return AccessResult::forbidden();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Creates a merged title with the main title and optional subtitle.
 */
function breema_merge_titles(\Drupal\node\NodeInterface $node) {
  $merged_title = '';
  if ($node->hasField('field_title_main')) {
    $main_title = $node->get('field_title_main')->getValue();
    $merged_title = $main_title[0]['value'];
    if ($node->hasField('field_title_sub')) {
      $subtitle = $node->get('field_title_sub')->getValue();
      if (!empty($subtitle)) {
        $merged_title .= ': ' . $subtitle[0]['value'];
      }
    }
  }
  return $merged_title;
}

/**
 * Implements hook_entity_view_alter().
 */
function breema_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'directory_entry') {
    $build['#attached']['library'][] = 'breema/directory_entry';
    $author = $build['#node']->get('uid')->getValue();
    if (!empty($author[0]['target_id'])) {
      $author_uid = $author[0]['target_id'];
    }
    if (!empty($author_uid)) {
      $access_manager = \Drupal::service('access_manager');
      if ($access_manager->checkNamedRoute('entity.user.contact_form', ['user' => $author_uid])) {
        $contact_url = Url::fromRoute('entity.user.contact_form', ['user' => $author_uid]);
      }
      $author_entity = user_load($author_uid);
      $user_picture = $author_entity->get('user_picture')->getValue();
    }

    if (!empty($user_picture)) {
      $user_picture_file = file_load($user_picture[0]['target_id']);
      $build['headshot'] = [
        '#theme' => 'image_style',
        '#style_name' => $build['#view_mode'] == 'full' ? 'medium' : 'thumbnail',
        '#weight' => -1,
        '#prefix' => '<div class="headshot">',
        '#suffix' => '</div>',
        '#uri' => $user_picture_file->getFileUri(),
        '#alt' => t('Profile image for @user_name', ['@user_name' => $author_entity->getAccountName()]),
      ];
    }

    if (!empty($contact_url)) {
      $build['contact_link'] = [
        '#weight' => 6,
        '#prefix' => '<div class="contact-form-link">',
        '#markup' => t('<a href=":contact">Send message</a>', [':contact' => $contact_url->toString()]),
        '#suffix' => '</div>',
      ];
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Updates place nodes for the 'has_active_event' field.
 */
function breema_cron() {
  $event_mgr = new BreemaEventMgr();
  $event_mgr->updateActivePlaces();
}
