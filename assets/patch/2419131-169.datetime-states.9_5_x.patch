diff --git a/core/includes/theme.inc b/core/includes/theme.inc
index 1af98c6753..3fdd3a6220 100644
--- a/core/includes/theme.inc
+++ b/core/includes/theme.inc
@@ -603,6 +603,12 @@ function template_preprocess_datetime_form(&$variables) {
  */
 function template_preprocess_datetime_wrapper(&$variables) {
   $element = $variables['element'];
+  $element += [
+    '#title_display' => 'before',
+    '#wrapper_attributes' => [],
+    '#label_attributes' => [],
+  ];
+  $variables['attributes'] = $element['#wrapper_attributes'];
 
   if (!empty($element['#title'])) {
     $variables['title'] = $element['#title'];
@@ -612,6 +618,19 @@ function template_preprocess_datetime_wrapper(&$variables) {
       $variables['title'] = ['#markup' => $variables['title']];
     }
   }
+  // Add label_display and label variables to template.
+  $variables['label_display'] = $element['#title_display'];
+  $variables['label'] = ['#theme' => 'form_element_label'];
+  $variables['label'] += array_intersect_key($element, array_flip(['#id', '#required', '#title', '#title_display']));
+  $variables['label']['#attributes'] = $element['#label_attributes'];
+
+  // Pass elements #type and #name to template.
+  if (!empty($element['#type'])) {
+    $variables['type'] = $element['#type'];
+  }
+  if (!empty($element['#name'])) {
+    $variables['name'] = $element['#name'];
+  }
 
   // Suppress error messages.
   $variables['errors'] = NULL;
diff --git a/core/lib/Drupal/Core/Datetime/Element/Datetime.php b/core/lib/Drupal/Core/Datetime/Element/Datetime.php
index 845fe259b4..ac23d323cb 100644
--- a/core/lib/Drupal/Core/Datetime/Element/Datetime.php
+++ b/core/lib/Drupal/Core/Datetime/Element/Datetime.php
@@ -268,6 +268,7 @@ public static function processDatetime(&$element, FormStateInterface $form_state
         '#size' => max(12, strlen($element['#value']['date'])),
         '#error_no_message' => TRUE,
         '#date_date_format' => $element['#date_date_format'],
+        '#states' => empty($element['#states']) ? [] : $element['#states'],
       ];
 
       // Allows custom callbacks to alter the element.
@@ -299,6 +300,7 @@ public static function processDatetime(&$element, FormStateInterface $form_state
         '#required' => $element['#required'],
         '#size' => 12,
         '#error_no_message' => TRUE,
+        '#states' => empty($element['#states']) ? [] : $element['#states'],
       ];
 
       // Allows custom callbacks to alter the element.
diff --git a/core/misc/states.es6.js b/core/misc/states.es6.js
index 69cc4b3458..09781ec45e 100644
--- a/core/misc/states.es6.js
+++ b/core/misc/states.es6.js
@@ -687,7 +687,11 @@
         .toggleClass('form-disabled', e.value)
         .find('select, input, textarea')
         .prop('disabled', e.value);
-
+      // A complex form element, like 'datetime' (one made up of multiple
+      // sub-elements) may have a label for the element as a whole.
+      $(e.target)
+        .closest('.js-complex-form-item')
+        .toggleClass('form-disabled', e.value);
       // Note: WebKit nightlies don't reflect that change correctly.
       // See https://bugs.webkit.org/show_bug.cgi?id=23789
     }
@@ -701,16 +705,28 @@
           .attr({ required: 'required', 'aria-required': 'true' })
           .closest('.js-form-item, .js-form-wrapper')
           .find(label);
+        // A complex form element, like 'datetime' (one made up of multiple
+        // sub-elements) may have a label for the element as a whole.
+        const $complexLabel = $(e.target)
+          .closest('.js-complex-form-item')
+          .children('label');
         // Avoids duplicate required markers on initialization.
         if (!$label.hasClass('js-form-required').length) {
           $label.addClass('js-form-required form-required');
         }
+        if (!$complexLabel.hasClass('js-form-required').length) {
+          $complexLabel.addClass('js-form-required form-required');
+        }
       } else {
         $(e.target)
           .removeAttr('required aria-required')
           .closest('.js-form-item, .js-form-wrapper')
           .find('label.js-form-required')
           .removeClass('js-form-required form-required');
+        $(e.target)
+          .closest('.js-complex-form-item')
+          .children('label')
+          .removeClass('js-form-required form-required');
       }
     }
   });
@@ -720,6 +736,22 @@
       $(e.target)
         .closest('.js-form-item, .js-form-submit, .js-form-wrapper')
         .toggle(e.value);
+      // A complex form element, like 'datetime' (one made up of multiple
+      // sub-elements) may have a label for the element as a whole.
+      const $complexLabel = $(e.target)
+        .closest('.js-complex-form-item')
+        .children('label');
+      // If there is a label, toggle the visibility of the label too.
+      if ($complexLabel.length) {
+        $complexLabel.toggle(e.value);
+      }
+      const $complexDescription = $(e.target)
+        .closest('.js-complex-form-item')
+        .children('div.description, div.form-item__description');
+      // If there is a description, toggle the visibility of the description too.
+      if ($complexDescription.length) {
+        $complexDescription.toggle(e.value);
+      }
     }
   });
 
diff --git a/core/misc/states.js b/core/misc/states.js
index 15987aca87..458db78306 100644
--- a/core/misc/states.js
+++ b/core/misc/states.js
@@ -298,6 +298,7 @@
   $document.on('state:disabled', function (e) {
     if (e.trigger) {
       $(e.target).closest('.js-form-item, .js-form-submit, .js-form-wrapper').toggleClass('form-disabled', e.value).find('select, input, textarea').prop('disabled', e.value);
+      $(e.target).closest('.js-complex-form-item').toggleClass('form-disabled', e.value);
     }
   });
   $document.on('state:required', function (e) {
@@ -333,4 +334,4 @@
       }
     }
   });
-})(jQuery, Drupal);
\ No newline at end of file
+})(jQuery, Drupal);
diff --git a/core/modules/system/templates/datetime-wrapper.html.twig b/core/modules/system/templates/datetime-wrapper.html.twig
index a14da8937b..81f00604ff 100644
--- a/core/modules/system/templates/datetime-wrapper.html.twig
+++ b/core/modules/system/templates/datetime-wrapper.html.twig
@@ -5,8 +5,16 @@
  *
  * Available variables:
  * - content: The form element to be output, usually a datelist, or datetime.
- * - title: The title of the form element.
- * - title_attributes: HTML attributes for the title wrapper.
+ * - label: A rendered label element.
+ * - label_display: Label display setting. It can have these values:
+ *   - before: The label is output before the element. This is the default.
+ *     The label includes the #title and the required marker, if #required.
+ *   - after: The label is output after the element. For example, this is used
+ *     for radio and checkbox #type elements. If the #title is empty but the
+ *     field is #required, the label will contain only the required marker.
+ *   - invisible: Labels are critical for screen readers to enable them to
+ *     properly navigate through forms but can be visually distracting. This
+ *     property hides the label for everyone except screen readers.
  * - description: Description text for the form element.
  * - required: An indicator for whether the associated form element is required.
  *
@@ -16,22 +24,26 @@
  */
 #}
 {%
-  set title_classes = [
-    required ? 'js-form-required',
-    required ? 'form-required',
-  ]
+set container_classes = [
+'js-complex-form-item',
+]
 %}
-{% if title %}
-  <h4{{ title_attributes.addClass(title_classes) }}>{{ title }}</h4>
-{% endif %}
-{{ content }}
-{% if errors %}
-  <div>
-    {{ errors }}
-  </div>
-{% endif %}
-{% if description %}
-  <div{{ description_attributes }}>
-    {{ description }}
-  </div>
-{% endif %}
+<div{{ attributes.addClass(container_classes) }}>
+  {% if label_display in ['before', 'invisible'] %}
+    {{ label }}
+  {% endif %}
+  {{ content }}
+  {% if errors %}
+    <div>
+      {{ errors }}
+    </div>
+  {% endif %}
+  {% if description %}
+    <div{{ description_attributes }}>
+      {{ description }}
+    </div>
+  {% endif %}
+  {% if label_display == 'after' %}
+    {{ label }}
+  {% endif %}
+</div>
diff --git a/core/modules/system/tests/modules/datetime_states_test/datetime_states_test.info.yml b/core/modules/system/tests/modules/datetime_states_test/datetime_states_test.info.yml
new file mode 100644
index 0000000000..65d61142dc
--- /dev/null
+++ b/core/modules/system/tests/modules/datetime_states_test/datetime_states_test.info.yml
@@ -0,0 +1,5 @@
+name: 'Datetime #states test'
+type: module
+description: 'Provides an example demonstrating how form #states affect datetime elements.'
+package: Testing
+version: VERSION
diff --git a/core/modules/system/tests/modules/datetime_states_test/datetime_states_test.routing.yml b/core/modules/system/tests/modules/datetime_states_test/datetime_states_test.routing.yml
new file mode 100644
index 0000000000..6594e48a8b
--- /dev/null
+++ b/core/modules/system/tests/modules/datetime_states_test/datetime_states_test.routing.yml
@@ -0,0 +1,13 @@
+datetime_states_test.example:
+  path: '/datetime-states-test/example'
+  defaults:
+    _form: '\Drupal\datetime_states_test\Form\DatetimeStatesTestForm'
+  requirements:
+    _access: 'TRUE'
+
+datetime_states_test.admin.example:
+  path: '/admin/datetime-states-test/example'
+  defaults:
+    _form: '\Drupal\datetime_states_test\Form\DatetimeStatesTestForm'
+  requirements:
+    _access: 'TRUE'
diff --git a/core/modules/system/tests/modules/datetime_states_test/src/Form/DatetimeStatesTestForm.php b/core/modules/system/tests/modules/datetime_states_test/src/Form/DatetimeStatesTestForm.php
new file mode 100644
index 0000000000..186711ce4a
--- /dev/null
+++ b/core/modules/system/tests/modules/datetime_states_test/src/Form/DatetimeStatesTestForm.php
@@ -0,0 +1,72 @@
+<?php
+
+namespace Drupal\datetime_states_test\Form;
+
+use Drupal\Core\Form\FormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Defines a form for testing #states on datetime elements.
+ *
+ * Includes toggle checkboxes for 'Invisible', 'Disabled' and 'Required', and a
+ * datetime field with #states configured appropriately for each checkbox.
+ */
+class DatetimeStatesTestForm extends FormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'datetime_states_test_form';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+    $form['toggle_invisible'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Invisible'),
+    ];
+    $form['toggle_disabled'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Disabled'),
+    ];
+    $form['toggle_required'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Required'),
+    ];
+
+    $form['datetime'] = [
+      '#type' => 'datetime',
+      '#title' => $this->t('Datetime'),
+      '#description' => $this->t('A datetime form element.'),
+      '#states' => [
+        'invisible' => [
+          ':input[name="toggle_invisible"]' => ['checked' => TRUE],
+        ],
+        'disabled' => [
+          ':input[name="toggle_disabled"]' => ['checked' => TRUE],
+        ],
+        'required' => [
+          ':input[name="toggle_required"]' => ['checked' => TRUE],
+        ],
+      ],
+    ];
+
+    $form['submit'] = [
+      '#type' => 'submit',
+      '#value' => $this->t('Save'),
+    ];
+
+    return $form;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    // Sample form only, nothing to submit.
+  }
+
+}
diff --git a/core/modules/system/tests/src/FunctionalJavascript/DatetimeStatesTest.php b/core/modules/system/tests/src/FunctionalJavascript/DatetimeStatesTest.php
new file mode 100644
index 0000000000..e9b2ac0a95
--- /dev/null
+++ b/core/modules/system/tests/src/FunctionalJavascript/DatetimeStatesTest.php
@@ -0,0 +1,115 @@
+<?php
+
+namespace Drupal\Tests\system\FunctionalJavascript;
+
+use Drupal\Core\Url;
+use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
+
+/**
+ * Ensure that #states works properly on form elements of #type 'datetime'.
+ *
+ * @group datetime
+ */
+class DatetimeStatesTest extends WebDriverTestBase {
+
+  /**
+   * The user object to test with.
+   *
+   * @var \Drupal\user\UserInterface
+   */
+  protected $account;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['datetime_states_test'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    // Create a user.
+    $account = $this->drupalCreateUser();
+
+    // Activate user by logging in.
+    $this->drupalLogin($account);
+  }
+
+  /**
+   * Tests #states functionality on datetime form elements.
+   */
+  public function testDatetimeStates() {
+    $this->drupalGet(Url::fromRoute('datetime_states_test.example'));
+
+    // Make sure the initial state makes sense.
+    $page = $this->getSession()->getPage();
+
+    $toggle_invisible = $page->findField('toggle_invisible');
+    $this->assertNotEmpty($toggle_invisible);
+    $this->assertTrue($toggle_invisible->isVisible());
+    $this->assertNoFieldChecked('edit-toggle-invisible');
+
+    $toggle_disabled = $page->findField('toggle_disabled');
+    $this->assertNotEmpty($toggle_disabled);
+    $this->assertTrue($toggle_disabled->isVisible());
+    $this->assertNoFieldChecked('edit-toggle-disabled');
+
+    $toggle_required = $page->findField('toggle_required');
+    $this->assertNotEmpty($toggle_required);
+    $this->assertTrue($toggle_required->isVisible());
+    $this->assertNoFieldChecked('edit-toggle-required');
+
+    $datetime_label = $this->assertSession()->elementExists('css', 'label[for="edit-datetime"]');
+    $this->assertNotEmpty($datetime_label);
+    $this->assertTrue($datetime_label->isVisible(), 'Datetime label is visible');
+    $this->assert($datetime_label->getText() === 'Datetime', 'Datetime label is correct');
+    $this->assertFalse($datetime_label->hasClass('js-form-required'), 'Datetime label is not marked as required.');
+
+    $date_field = $page->findField('datetime[date]');
+    $this->assertNotEmpty($date_field);
+    $this->assertTrue($date_field->isVisible(), 'Date is visible');
+    $this->assertFalse($date_field->hasAttribute('disabled'), 'Date is enabled');
+    $this->assertFalse($date_field->hasAttribute('required'), 'Date is optional');
+
+    $time_field = $page->findField('datetime[time]');
+    $this->assertNotEmpty($time_field);
+    $this->assertTrue($time_field->isVisible(), 'Time is visible');
+    $this->assertFalse($time_field->hasAttribute('disabled'), 'Time is enabled');
+    $this->assertFalse($time_field->hasAttribute('required'), 'Time is optional');
+
+    // Now, check the 'Invisible' toggle and see what happens.
+    $toggle_invisible->check();
+    $this->assertFalse($date_field->isVisible(), 'Date is invisible');
+    $this->assertFalse($time_field->isVisible(), 'Time is invisible');
+    $this->assertFalse($datetime_label->isVisible(), 'Datetime label is invisible');
+
+    // Make it visible again.
+    $toggle_invisible->uncheck();
+    $this->assertTrue($date_field->isVisible(), 'Date is visible');
+    $this->assertTrue($time_field->isVisible(), 'Time is visible');
+    $this->assertTrue($datetime_label->isVisible(), 'Datetime label is visible');
+
+    // Make it disabled.
+    $toggle_disabled->check();
+    $this->assertTrue($date_field->hasAttribute('disabled'), 'Date is disabled');
+    $this->assertTrue($time_field->hasAttribute('disabled'), 'Time is disabled');
+    // Put it back.
+    $toggle_disabled->uncheck();
+    $this->assertFalse($date_field->hasAttribute('disabled'), 'Date is enabled');
+    $this->assertFalse($time_field->hasAttribute('disabled'), 'Time is enabled');
+
+    // Make it required.
+    $toggle_required->check();
+    $this->assertTrue($date_field->hasAttribute('required'), 'Date is required');
+    $this->assertTrue($time_field->hasAttribute('required'), 'Time is required');
+    $this->assertTrue($datetime_label->hasClass('js-form-required'), 'Datetime label is marked as required');
+  }
+
+}
diff --git a/core/themes/bartik/templates/datetime-wrapper.html.twig b/core/themes/bartik/templates/datetime-wrapper.html.twig
new file mode 100644
index 0000000000..ec8a33d71c
--- /dev/null
+++ b/core/themes/bartik/templates/datetime-wrapper.html.twig
@@ -0,0 +1,54 @@
+{#
+/**
+ * @file
+ * Theme override of a datetime form wrapper.
+ *
+ * Available variables:
+ * - content: The form element to be output, usually a datelist, or datetime.
+ * - label: A rendered label element.
+ * - label_display: Label display setting. It can have these values:
+ *   - before: The label is output before the element. This is the default.
+ *     The label includes the #title and the required marker, if #required.
+ *   - after: The label is output after the element. For example, this is used
+ *     for radio and checkbox #type elements. If the #title is empty but the
+ *     field is #required, the label will contain only the required marker.
+ *   - invisible: Labels are critical for screen readers to enable them to
+ *     properly navigate through forms but can be visually distracting. This
+ *     property hides the label for everyone except screen readers.
+ * - description: Description text for the form element.
+ * - required: An indicator for whether the associated form element is required.
+ *
+ * @see template_preprocess_datetime_wrapper()
+ */
+#}
+{%
+set container_classes = [
+'js-form-item',
+'form-item',
+'js-form-type-' ~ type|clean_class,
+'form-type-' ~ type|clean_class,
+'js-form-item-' ~ name|clean_class,
+'form-item-' ~ name|clean_class,
+'js-complex-form-item',
+disabled == 'disabled' ? 'form-disabled',
+]
+%}
+<div{{ attributes.addClass(container_classes) }}>
+  {% if label_display in ['before', 'invisible'] %}
+    {{ label }}
+  {% endif %}
+  {{ content }}
+  {% if errors %}
+    <div class="form-item--error-message">
+      <strong>{{ errors }}</strong>
+    </div>
+  {% endif %}
+  {% if description %}
+    <div{{ description_attributes.addClass('description') }}>
+      {{ description }}
+    </div>
+  {% endif %}
+  {% if label_display == 'after' %}
+    {{ label }}
+  {% endif %}
+</div>
diff --git a/core/themes/claro/templates/datetime-wrapper.html.twig b/core/themes/claro/templates/datetime-wrapper.html.twig
index 4215b28ff2..5bed20f79c 100644
--- a/core/themes/claro/templates/datetime-wrapper.html.twig
+++ b/core/themes/claro/templates/datetime-wrapper.html.twig
@@ -8,17 +8,15 @@
  * @see template_preprocess_form_element()
  */
 #}
+{% if errors %}
 {%
-  set title_classes = [
-    'form-item__label',
-    required ? 'js-form-required',
-    required ? 'form-required',
-    errors ? 'has-error',
-  ]
+  set label_attributes = label_attributes.addClass('has-error')
 %}
-<div class="form-item form-datetime-wrapper">
-{% if title %}
-  <h4{{ title_attributes.addClass(title_classes) }}>{{ title }}</h4>
+{% endif %}
+
+<div class="form-item form-datetime-wrapper js-complex-form-item">
+{% if label_display in ['before', 'invisible'] %}
+  {{ label }}
 {% endif %}
 {{ content }}
 {% if errors %}
@@ -31,4 +29,7 @@
     {{ description }}
   </div>
 {% endif %}
+{% if label_display == 'after' %}
+  {{ label }}
+{% endif %}
 </div>
diff --git a/core/themes/seven/css/components/form.css b/core/themes/seven/css/components/form.css
index 3fe0e72992..99c51fd1e9 100644
--- a/core/themes/seven/css/components/form.css
+++ b/core/themes/seven/css/components/form.css
@@ -107,6 +107,8 @@ label[for] {
 .form-disabled input.form-number,
 .form-disabled input.form-color,
 .form-disabled input.form-file,
+.form-disabled input.form-date,
+.form-disabled input.form-time,
 .form-disabled textarea.form-textarea,
 .form-disabled select.form-select {
   border-color: #d4d4d4;
diff --git a/core/themes/seven/templates/datetime-wrapper.html.twig b/core/themes/seven/templates/datetime-wrapper.html.twig
new file mode 100644
index 0000000000..ec8a33d71c
--- /dev/null
+++ b/core/themes/seven/templates/datetime-wrapper.html.twig
@@ -0,0 +1,54 @@
+{#
+/**
+ * @file
+ * Theme override of a datetime form wrapper.
+ *
+ * Available variables:
+ * - content: The form element to be output, usually a datelist, or datetime.
+ * - label: A rendered label element.
+ * - label_display: Label display setting. It can have these values:
+ *   - before: The label is output before the element. This is the default.
+ *     The label includes the #title and the required marker, if #required.
+ *   - after: The label is output after the element. For example, this is used
+ *     for radio and checkbox #type elements. If the #title is empty but the
+ *     field is #required, the label will contain only the required marker.
+ *   - invisible: Labels are critical for screen readers to enable them to
+ *     properly navigate through forms but can be visually distracting. This
+ *     property hides the label for everyone except screen readers.
+ * - description: Description text for the form element.
+ * - required: An indicator for whether the associated form element is required.
+ *
+ * @see template_preprocess_datetime_wrapper()
+ */
+#}
+{%
+set container_classes = [
+'js-form-item',
+'form-item',
+'js-form-type-' ~ type|clean_class,
+'form-type-' ~ type|clean_class,
+'js-form-item-' ~ name|clean_class,
+'form-item-' ~ name|clean_class,
+'js-complex-form-item',
+disabled == 'disabled' ? 'form-disabled',
+]
+%}
+<div{{ attributes.addClass(container_classes) }}>
+  {% if label_display in ['before', 'invisible'] %}
+    {{ label }}
+  {% endif %}
+  {{ content }}
+  {% if errors %}
+    <div class="form-item--error-message">
+      <strong>{{ errors }}</strong>
+    </div>
+  {% endif %}
+  {% if description %}
+    <div{{ description_attributes.addClass('description') }}>
+      {{ description }}
+    </div>
+  {% endif %}
+  {% if label_display == 'after' %}
+    {{ label }}
+  {% endif %}
+</div>
