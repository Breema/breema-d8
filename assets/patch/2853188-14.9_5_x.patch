diff --git a/core/modules/views/src/Plugin/views/filter/NumericFilter.php b/core/modules/views/src/Plugin/views/filter/NumericFilter.php
index 30556125ab5..710c73737ea 100644
--- a/core/modules/views/src/Plugin/views/filter/NumericFilter.php
+++ b/core/modules/views/src/Plugin/views/filter/NumericFilter.php
@@ -145,6 +145,12 @@ public function operators() {
         'method' => 'opRegex',
         'values' => 1,
       ],
+      'not_regular_expression' => [
+        'title' => $this->t('Negated Regular expression'),
+        'short' => $this->t('not regex'),
+        'method' => 'opNotRegex',
+        'values' => 1,
+      ],
     ];
 
     // if the definition allows for the empty operator, add it.
@@ -377,6 +383,16 @@ protected function opRegex($field) {
     $this->query->addWhere($this->options['group'], $field, $this->value['value'], 'REGEXP');
   }
 
+  /**
+   * Filters by a negative regular expression.
+   *
+   * @param string $field
+   *   The expression pointing to the queries field, for example "foo.bar".
+   */
+  protected function opNotRegex($field) {
+    $this->query->addWhere($this->options['group'], $field, $this->value['value'], 'NOT REGEXP');
+  }
+
   public function adminSummary() {
     if ($this->isAGroup()) {
       return $this->t('grouped');
diff --git a/core/modules/views/src/Plugin/views/filter/StringFilter.php b/core/modules/views/src/Plugin/views/filter/StringFilter.php
index 948acb67566..7a446e2d1a5 100644
--- a/core/modules/views/src/Plugin/views/filter/StringFilter.php
+++ b/core/modules/views/src/Plugin/views/filter/StringFilter.php
@@ -183,6 +183,12 @@ public function operators() {
         'method' => 'opRegex',
         'values' => 1,
       ],
+      'not_regular_expression' => [
+        'title' => $this->t('Negated Regular expression'),
+        'short' => $this->t('not regex'),
+        'method' => 'opNotRegex',
+        'values' => 1,
+      ],
     ];
     // if the definition allows for the empty operator, add it.
     if (!empty($this->definition['allow empty'])) {
@@ -442,6 +448,16 @@ protected function opRegex($field) {
     $this->query->addWhere($this->options['group'], $field, $this->value, 'REGEXP');
   }
 
+  /**
+   * Filters by a negative regular expression.
+   *
+   * @param string $field
+   *   The expression pointing to the queries field, for example "foo.bar".
+   */
+  protected function opNotRegex($field) {
+    $this->query->addWhere($this->options['group'], $field, $this->value, 'NOT REGEXP');
+  }
+
   protected function opEmpty($field) {
     if ($this->operator == 'empty') {
       $operator = "IS NULL";
diff --git a/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php b/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php
index 4c3741b3009..aa6dd38d642 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php
@@ -243,6 +243,49 @@ public function testFilterNumericExposedGroupedNotBetween() {
     $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
   }
 
+  /**
+   * Tests the numeric filter handler with the negated 'regular_expression' operator.
+   */
+  public function testFilterNumericNotRegularExpression() {
+    $view = Views::getView('test_view');
+    $view->setDisplay();
+
+    // Filtering by regular expression pattern.
+    $view->displayHandlers->get('default')->overrideOption('filters', [
+      'age' => [
+        'id' => 'age',
+        'table' => 'views_test_data',
+        'field' => 'age',
+        'relationship' => 'none',
+        'operator' => 'not_regular_expression',
+        'value' => [
+          'value' => '2[8]',
+        ],
+      ],
+    ]);
+
+    $this->executeView($view);
+    $resultset = [
+      [
+        'name' => 'John',
+        'age' => 25,
+      ],
+      [
+        'name' => 'George',
+        'age' => 27,
+      ],
+      [
+        'name' => 'Paul',
+        'age' => 26,
+      ],
+      [
+        'name' => 'Meredith',
+        'age' => 30,
+      ],
+    ];
+    $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
+  }
+
   /**
    * Tests the numeric filter handler with the 'regular_expression' operator.
    */
@@ -304,6 +347,39 @@ public function testFilterNumericExposedGroupedRegularExpression() {
     $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
   }
 
+  /**
+   * Tests the numeric filter handler with the 'not_regular_expression' operator
+   * to grouped exposed filters.
+   */
+  public function testFilterNumericExposedGroupedNotRegularExpression() {
+    $filters = $this->getGroupedExposedFilters();
+    $view = Views::getView('test_view');
+    $view->newDisplay('page', 'Page', 'page_1');
+
+    // Filter: Age, Operator: not_regular_expression, Value: 2[7-8]
+    $filters['age']['group_info']['default_group'] = 7;
+    $view->setDisplay('page_1');
+    $view->displayHandlers->get('page_1')->overrideOption('filters', $filters);
+    $view->save();
+
+    $this->executeView($view);
+    $resultset = [
+      [
+        'name' => 'John',
+        'age' => 25,
+      ],
+      [
+        'name' => 'Paul',
+        'age' => 26,
+      ],
+      [
+        'name' => 'Meredith',
+        'age' => 30,
+      ],
+    ];
+    $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
+  }
+
   public function testFilterNumericEmpty() {
     $view = Views::getView('test_view');
     $view->setDisplay();
@@ -502,6 +578,13 @@ protected function getGroupedExposedFilters() {
                 'value' => '2[7-8]',
               ],
             ],
+            7 => [
+              'title' => 'Age is regexp 2[7-8]',
+              'operator' => 'not_regular_expression',
+              'value' => [
+                'value' => '2[7-8]',
+              ],
+            ],
           ],
         ],
       ],
diff --git a/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php b/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php
index 291e658599d..367fcaec70e 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FilterStringTest.php
@@ -415,6 +415,36 @@ public function testFilterStringGroupedExposedStarts() {
     $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
   }
 
+  public function testFilterStringGroupedNotRegularExpression() {
+    $filters = $this->getGroupedExposedFilters();
+    $view = $this->getBasicPageView();
+
+    // Filter: Name, Operator: not_regular_expression, Value: ^Rin
+    $filters['name']['group_info']['default_group'] = 6;
+    $view->setDisplay('page_1');
+    $view->displayHandlers->get('page_1')->overrideOption('filters', $filters);
+    $view->save();
+    $this->container->get('router.builder')->rebuild();
+
+    $this->executeView($view);
+
+    $resultset = [
+      [
+        'name' => 'John',
+      ],
+      [
+        'name' => 'George',
+      ],
+      [
+        'name' => 'Paul',
+      ],
+      [
+        'name' => 'Meredith',
+      ],
+    ];
+    $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
+  }
+
   public function testFilterStringNotStarts() {
     $view = Views::getView('test_view');
     $view->setDisplay();
@@ -769,6 +799,49 @@ public function testFilterStringGroupedExposedEmpty() {
     $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
   }
 
+  /**
+   * Tests the string filter handler with the negated 'regular_expression' operator.
+   */
+  public function testFilterStringNotRegularExpression() {
+    $view = Views::getView('test_view');
+    $view->setDisplay();
+
+    // Filtering by regular expression pattern.
+    $view->displayHandlers->get('default')->overrideOption('filters', [
+      'age' => [
+        'id' => 'name',
+        'table' => 'views_test_data',
+        'field' => 'name',
+        'relationship' => 'none',
+        'operator' => 'not_regular_expression',
+        'value' => [
+          'value' => '^Rin',
+        ],
+      ],
+    ]);
+
+    $this->executeView($view);
+    $resultset = [
+      [
+        'name' => 'John',
+        'age' => 25,
+      ],
+      [
+        'name' => 'George',
+        'age' => 27,
+      ],
+      [
+        'name' => 'Paul',
+        'age' => 26,
+      ],
+      [
+        'name' => 'Meredith',
+        'age' => 30,
+      ],
+    ];
+    $this->assertIdenticalResultset($view, $resultset, $this->columnMap);
+  }
+
   protected function getGroupedExposedFilters() {
     $filters = [
       'name' => [
@@ -814,6 +887,11 @@ protected function getGroupedExposedFilters() {
               'operator' => 'longerthan',
               'value' => 7,
             ],
+            6 => [
+              'title' => 'Does not start with Rin',
+              'operator' => 'not_regular_expression',
+              'value' => '^Rin',
+            ],
           ],
         ],
       ],
